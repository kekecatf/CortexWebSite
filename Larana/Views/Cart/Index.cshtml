@model Larana.Models.Cart

<div class="cart-container">
    <h1 class="cart-title">My Cart</h1>
    @if (!Model.CartItems.Any())
    {
        <div class="empty-cart-message">
            Your cart is empty.
        </div>
    }
    else
    {
        <table class="table cart-table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.CartItems)
                {
                    <tr class="cart-item" data-id="@item.ProductId" data-price="@item.Product.Price" data-click-collect="@item.Product.IsClickAndCollect.ToString().ToLower()">
                        <td>
                            <a href="@Url.Action("Details", "Shop", new { id = item.ProductId })" class="product-cell-link">
                                <div class="cart-product-content">
                                    <img src="@Url.Content("~/" + item.Product.PhotoPath)" alt="@item.Product.Name" class="cart-product-image" />
                                    <span>@item.Product.Name</span>
                                    @if (item.Product.IsClickAndCollect)
                                    {
                                        <span class="click-collect-badge">
                                            <i class="fas fa-shopping-bag"></i> Click & Collect Available
                                        </span>
                                    }
                                </div>
                            </a>
                        </td>
                        <td>
                            <div class="quantity-control">
                                <button type="button" class="quantity-btn quantity-decrease">-</button>
                                <input type="number" class="quantity-input" value="@item.Quantity" min="1" max="99" />
                                <button type="button" class="quantity-btn quantity-increase">+</button>
                            </div>
                        </td>
                        <td class="item-price">@item.Product.Price.ToString("C")</td>
                        <td class="item-total">@((item.Quantity * item.Product.Price).ToString("C"))</td>
                        <td>
                            <button class="btn btn-danger btn-remove" onclick="removeFromCart(@item.ProductId)">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <h3 class="cart-total">Total: <span id="cart-total-amount">@Model.CartItems.Sum(ci => ci.Quantity * ci.Product.Price).ToString("C")</span></h3>
        <div class="text-right">
            <button class="btn btn-success btn-checkout" onclick="toggleCheckoutForm()">Checkout</button>
        </div>

        <div id="checkout-form" class="checkout-form-container" style="display: none;">
            <h3 class="checkout-form-title">Checkout Details</h3>
            <form id="checkoutForm">
                <div class="form-group" id="click-collect-option">
                    <div class="click-collect-container">
                        <input type="checkbox" id="IsClickAndCollect" name="IsClickAndCollect" value="true" />
                        <label for="IsClickAndCollect">
                            <i class="fas fa-shopping-bag"></i> Use Click & Collect
                            <span class="click-collect-info">(In-store pickup)</span>
                        </label>
                        <p class="click-collect-description">
                            Choose Click & Collect to pick up your order in-store. Only products marked as "Click & Collect Available" are eligible.
                        </p>
                        <div id="click-collect-eligible" class="click-collect-eligible hidden">
                            <p class="eligible-title">These products are eligible for Click & Collect:</p>
                            <ul id="eligible-products" class="eligible-products-list">
                                <!-- Filled by JavaScript -->
                            </ul>
                        </div>
                    </div>
                </div>

                <div id="shipping-details">
                    <div class="form-group">
                        <label for="RecipientName">Recipient Name:</label>
                        <input type="text" id="RecipientName" name="RecipientName" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="ShippingCompany">Shipping Company:</label>
                        <select id="ShippingCompany" name="ShippingCompany" class="form-control" required>
                            <option value="Aras Kargo">Aras Kargo</option>
                            <option value="Yurtiçi Kargo">Yurtiçi Kargo</option>
                            <option value="Mng">Mng</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="Address">Address:</label>
                        <input type="text" id="Address" name="Address" class="form-control" value="@ViewBag.Address" required />
                    </div>

                    <div class="form-group">
                        <label for="PhoneNumber">Phone Number:</label>
                        <input type="tel" id="PhoneNumber" name="PhoneNumber" class="form-control" value="@ViewBag.PhoneNumber" required />
                    </div>

                    <div class="form-group">
                        <label for="CardholderName">Cardholder Name:</label>
                        <input type="text" id="CardholderName" name="CardholderName" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="CardInfo">Card Number:</label>
                        <input type="text" id="CardInfo" name="CardInfo" class="form-control" placeholder="1234-5678-9876-5432" required />
                    </div>

                    <div class="form-group">
                        <label for="ExpirationDate">Expiration Date:</label>
                        <input type="text" id="ExpirationDate" name="ExpirationDate" class="form-control" placeholder="MM/YY" required />
                    </div>

                    <div class="form-group">
                        <label for="CVV">CVV:</label>
                        <input type="text" id="CVV" name="CVV" class="form-control" placeholder="123" required />
                    </div>

                    <button type="button" class="btn btn-primary" onclick="submitCheckout()">Submit</button>
                </div>
            </form>
        </div>
    }
</div>


<script>
function removeFromCart(productId) {
    $.ajax({
        url: '@Url.Action("RemoveFromCart", "Cart")',
        type: 'POST',
        data: { productId: productId },
        success: function (response) {
            if (response.success) {
                alert("The product has been successfully removed from your cart.");
                location.reload();
            } else {
                alert("Unable to remove the product: " + response.message);
            }
        },
        error: function () {
            alert("An error occurred while removing the product. Please try again later.");
        }
    });
}

function updateQuantity(productId, quantity) {
    $.ajax({
        url: '@Url.Action("UpdateQuantity", "Cart")',
        type: 'POST',
        data: { productId: productId, quantity: quantity },
        success: function (response) {
            if (response.success) {
                // Update the item total
                const row = $(`.cart-item[data-id="${productId}"]`);
                row.find('.item-total').text(response.itemTotal);
                
                // Update the cart total
                $('#cart-total-amount').text(response.cartTotal);
            } else {
                alert("Unable to update quantity: " + response.message);
            }
        },
        error: function () {
            alert("An error occurred while updating the quantity. Please try again later.");
        }
    });
}

$(document).ready(function() {
    // Handle quantity increase button
    $('.quantity-increase').click(function() {
        const input = $(this).siblings('.quantity-input');
        const newValue = parseInt(input.val()) + 1;
        if (newValue <= 99) {
            input.val(newValue);
            const productId = $(this).closest('.cart-item').data('id');
            updateQuantity(productId, newValue);
        }
    });
    
    // Handle quantity decrease button
    $('.quantity-decrease').click(function() {
        const input = $(this).siblings('.quantity-input');
        const newValue = parseInt(input.val()) - 1;
        if (newValue >= 1) {
            input.val(newValue);
            const productId = $(this).closest('.cart-item').data('id');
            updateQuantity(productId, newValue);
        }
    });
    
    // Handle direct input changes
    $('.quantity-input').change(function() {
        let value = parseInt($(this).val());
        
        // Validate input
        if (isNaN(value) || value < 1) {
            value = 1;
        } else if (value > 99) {
            value = 99;
        }
        
        $(this).val(value);
        const productId = $(this).closest('.cart-item').data('id');
        updateQuantity(productId, value);
    });
});

function toggleCheckoutForm() {
    const form = document.getElementById("checkout-form");
    form.style.display = form.style.display === "none" ? "block" : "none";
    
    // Initialize Click & Collect functionality when form is opened
    if (form.style.display === "block") {
        initClickAndCollect();
    }
}

function initClickAndCollect() {
    // Get all cart items
    const cartItems = document.querySelectorAll('.cart-item');
    let hasClickAndCollectProducts = false;
    const eligibleProducts = [];
    
    // Check if any products are eligible for Click & Collect
    cartItems.forEach(item => {
        const isClickCollect = item.getAttribute('data-click-collect') === 'true';
        const productId = item.getAttribute('data-id');
        const productName = item.querySelector('.cart-product-content span').textContent;
        
        if (isClickCollect) {
            hasClickAndCollectProducts = true;
            eligibleProducts.push({ id: productId, name: productName });
        }
    });
    
    // If no products are Click & Collect eligible, hide the option
    const clickCollectOption = document.getElementById('click-collect-option');
    if (!hasClickAndCollectProducts) {
        clickCollectOption.style.display = 'none';
        return;
    }
    
    // Show eligible products
    const eligibleContainer = document.getElementById('click-collect-eligible');
    const eligibleList = document.getElementById('eligible-products');
    
    eligibleList.innerHTML = '';
    eligibleProducts.forEach(product => {
        const li = document.createElement('li');
        li.textContent = product.name;
        eligibleList.appendChild(li);
    });
    
    // Toggle Click & Collect details when checkbox is clicked
    const checkbox = document.getElementById('IsClickAndCollect');
    const shippingDetails = document.getElementById('shipping-details');
    
    checkbox.addEventListener('change', function() {
        if (this.checked) {
            eligibleContainer.classList.remove('hidden');
            // Make address fields optional when Click & Collect is selected
            document.getElementById('Address').required = false;
            document.getElementById('ShippingCompany').required = false;
        } else {
            eligibleContainer.classList.add('hidden');
            // Make address fields required again
            document.getElementById('Address').required = true;
            document.getElementById('ShippingCompany').required = true;
        }
    });
}

function submitCheckout() {
    // Show loading state
    const submitButton = document.querySelector('.btn-primary');
    const originalText = submitButton.innerHTML;
    submitButton.innerHTML = 'Processing...';
    submitButton.disabled = true;
    
    // Clear previous error messages
    document.querySelectorAll('.checkout-error').forEach(el => el.remove());
    
    const isClickAndCollect = document.getElementById('IsClickAndCollect') && 
                              document.getElementById('IsClickAndCollect').checked;
                              
    const formData = {
        RecipientName: document.getElementById("RecipientName").value,
        ShippingCompany: document.getElementById("ShippingCompany").value,
        Address: document.getElementById("Address").value,
        PhoneNumber: document.getElementById("PhoneNumber").value,
        CardholderName: document.getElementById("CardholderName").value,
        CardInfo: document.getElementById("CardInfo").value,
        ExpirationDate: document.getElementById("ExpirationDate").value,
        CVV: document.getElementById("CVV").value,
        IsClickAndCollect: isClickAndCollect
    };

    // Client-side validation
    let isValid = true;
    
    if (!formData.RecipientName.trim()) {
        showFieldError("RecipientName", "Please enter the recipient's name.");
        isValid = false;
    }
    
    if (!isClickAndCollect) {
        // Only validate shipping details if not using Click & Collect
        if (!formData.ShippingCompany.trim()) {
            showFieldError("ShippingCompany", "Please select a shipping company.");
            isValid = false;
        }
        if (!formData.Address.trim()) {
            showFieldError("Address", "Please provide your delivery address.");
            isValid = false;
        }
    }
    
    if (!formData.PhoneNumber.trim()) {
        showFieldError("PhoneNumber", "Please provide your phone number.");
        isValid = false;
    }
    
    if (!formData.CardholderName.trim()) {
        showFieldError("CardholderName", "Please provide the cardholder's name.");
        isValid = false;
    }
    
    if (!formData.CardInfo.trim() || !/^\d{16}$/.test(formData.CardInfo.replace(/-/g, ""))) {
        showFieldError("CardInfo", "Please provide a valid 16-digit card number.");
        isValid = false;
    }
    
    if (!formData.ExpirationDate.trim() || !/^\d{2}\/\d{2}$/.test(formData.ExpirationDate)) {
        showFieldError("ExpirationDate", "Please provide a valid expiration date in MM/YY format.");
        isValid = false;
    }
    
    if (!formData.CVV.trim() || !/^\d{3}$/.test(formData.CVV)) {
        showFieldError("CVV", "Please provide a valid 3-digit CVV code.");
        isValid = false;
    }
    
    if (!isValid) {
        submitButton.innerHTML = originalText;
        submitButton.disabled = false;
        return;
    }

    // Add a short timeout to ensure the UI has time to update
    setTimeout(() => {
        $.ajax({
            url: '@Url.Action("Checkout", "Cart")',
            type: 'POST',
            data: formData,
            timeout: 30000, // 30 second timeout
            success: function (response) {
                if (response.success) {
                    showSuccessMessage("Your order has been successfully placed. Thank you for shopping with us!");
                    // Redirect after a short delay to show the success message
                    setTimeout(() => {
                        window.location.href = '@Url.Action("Index", "Cart")';
                    }, 2000);
                } else {
                    showErrorMessage("Unable to place your order: " + response.message);
                    submitButton.innerHTML = originalText;
                    submitButton.disabled = false;
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                if (textStatus === "timeout") {
                    showErrorMessage("The checkout request timed out. Please try again.");
                } else {
                    showErrorMessage("An error occurred while completing your checkout. Please try again later. Error: " + errorThrown);
                }
                submitButton.innerHTML = originalText;
                submitButton.disabled = false;
            }
        });
    }, 500);
}

function showFieldError(fieldId, message) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.createElement('div');
    errorDiv.className = 'checkout-error';
    errorDiv.textContent = message;
    field.parentNode.appendChild(errorDiv);
    field.classList.add('field-error');
}

function showErrorMessage(message) {
    const checkoutForm = document.getElementById('checkout-form');
    const errorDiv = document.createElement('div');
    errorDiv.className = 'alert alert-danger';
    errorDiv.textContent = message;
    checkoutForm.prepend(errorDiv);
    
    // Scroll to the error message
    errorDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

function showSuccessMessage(message) {
    const checkoutForm = document.getElementById('checkout-form');
    const successDiv = document.createElement('div');
    successDiv.className = 'alert alert-success';
    successDiv.textContent = message;
    checkoutForm.prepend(successDiv);
    
    // Scroll to the success message
    successDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
}
</script>

<style>
    .cart-container {
        max-width: 900px;
        margin: 50px auto;
        background: linear-gradient(145deg, #ffffff, #f1f1f1);
        border-radius: 12px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        padding: 30px;
    }

    .cart-title {
        font-size: 32px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 30px;
        color: #333;
        text-transform: uppercase;
        letter-spacing: 1.5px;
    }

    .cart-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        border-radius: 10px;
        overflow: hidden;
    }

        .cart-table th,
        .cart-table td {
            padding: 15px;
            text-align: center;
        }

        .cart-table th {
            background: #4CAF50;
            color: #fff;
            font-size: 18px;
            font-weight: bold;
            text-transform: uppercase;
        }

        .cart-table td {
            background: #fff;
            color: #444;
            font-size: 16px;
            vertical-align: middle;
        }

        .cart-table tr:nth-child(even) td {
            background: #f9f9f9;
        }

    .product-cell-link {
        display: block;
        text-decoration: none;
        color: inherit;
        width: 100%;
        height: 100%;
    }

    .cart-product-content {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .cart-product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 8px;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    }
    
    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
    }
    
    .quantity-input {
        width: 50px;
        text-align: center;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .quantity-btn {
        width: 30px;
        height: 30px;
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .quantity-btn:hover {
        background-color: #e0e0e0;
    }

    .cart-total {
        text-align: right;
        font-size: 22px;
        font-weight: bold;
        color: #333;
        margin-top: 20px;
    }

    .btn-remove {
        background-color: #FF5555;
        color: #fff;
        border: none;
        padding: 8px 20px;
        cursor: pointer;
        border-radius: 5px;
        font-size: 14px;
        font-weight: bold;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-remove:hover {
            background-color: #E04444;
            transform: scale(1.05);
        }

    .btn-checkout {
        background-color: #4CAF50;
        color: #fff;
        border: none;
        padding: 12px 30px;
        cursor: pointer;
        border-radius: 5px;
        font-size: 18px;
        font-weight: bold;
        display: inline-block;
        margin-top: 20px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-checkout:hover {
            background-color: #45A049;
            transform: translateY(-2px);
        }

    .empty-cart-message {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: #999;
        margin-top: 50px;
    }

    /* Checkout Form Styles */
    .checkout-form-container {
        margin-top: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Click & Collect Styles */
    .click-collect-badge {
        display: inline-block;
        background-color: #6f42c1;
        color: white;
        font-size: 0.75em;
        padding: 2px 6px;
        border-radius: 4px;
        margin-left: 10px;
        font-weight: bold;
    }

    .click-collect-container {
        background-color: #f0f0ff;
        border: 1px solid #d0d0ff;
        border-radius: 6px;
        padding: 15px;
        margin-bottom: 20px;
    }

    .click-collect-container label {
        font-weight: bold;
        font-size: 16px;
        margin-left: 10px;
        color: #333;
    }

    .click-collect-info {
        font-size: 14px;
        color: #666;
        font-weight: normal;
        margin-left: 5px;
    }

    .click-collect-description {
        margin: 10px 0 0 30px;
        font-size: 14px;
        color: #555;
    }

    .click-collect-eligible {
        margin-top: 15px;
        background-color: #fff;
        border: 1px dashed #ccc;
        border-radius: 4px;
        padding: 10px;
    }

    .eligible-title {
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
    }

    .eligible-products-list {
        list-style-type: none;
        padding-left: 10px;
    }

    .eligible-products-list li {
        padding: 5px 0;
        border-bottom: 1px solid #eee;
    }

    .hidden {
        display: none;
    }

    .checkout-form-title {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .form-group {
        margin-bottom: 15px;
        position: relative;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        transition: border-color 0.3s;
    }
    
    .form-control.field-error {
        border-color: #dc3545;
        background-color: #fff8f8;
    }
    
    .checkout-error {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        font-weight: bold;
    }
    
    .alert {
        padding: 12px 15px;
        margin-bottom: 15px;
        border: 1px solid transparent;
        border-radius: 4px;
    }
    
    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
    
    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
        
        .btn-primary:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .cart-container {
            padding: 20px;
        }

        .cart-table th,
        .cart-table td {
            font-size: 14px;
            padding: 10px;
        }

        .cart-product-content {
            flex-direction: column;
            align-items: center;
        }

        .cart-product-image {
            width: 100px;
            height: 100px;
        }

        .btn-checkout {
            width: 100%;
        }

        .cart-title {
            font-size: 24px;
        }
        
        .quantity-control {
            flex-direction: row;
        }
        
        .quantity-input {
            width: 40px;
            font-size: 14px;
        }
        
        .quantity-btn {
            width: 28px;
            height: 28px;
        }
    }
    
    /* Extra small screens */
    @@media (max-width: 576px) {
        .cart-table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }
    }
</style>
