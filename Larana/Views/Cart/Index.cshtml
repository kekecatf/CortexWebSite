@model Larana.Models.Cart

<div class="cart-container">
    <h1 class="cart-title">Sepetim</h1>
    @if (!Model.CartItems.Any())
    {
        <div class="empty-cart-message">
            Sepetiniz boş.
        </div>
    }
    else
    {
        <table class="table cart-table">
            <thead>
                <tr>
                    <th>Ürün</th>
                    <th>Adet</th>
                    <th>Fiyat</th>
                    <th>Toplam</th>
                    <th>İşlem</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.CartItems)
                {
                    <tr class="cart-item" data-id="@item.ProductId" data-price="@item.UnitPrice" data-click-collect="@(item.Product.IsClickAndCollect ? 1 : 0)">
                        <td>
                            <a href="@Url.Action("Details", "Shop", new { id = item.ProductId })" class="product-cell-link">
                                <div class="cart-product-content">
                                    <img src="@Url.Content("~/" + item.Product.PhotoPath)" alt="@item.Product.Name" class="cart-product-image" />
                                    <span>@item.Product.Name</span>
                                    @if (item.Product.IsClickAndCollect)
                                    {
                                        <span class="click-collect-badge">
                                            <i class="fas fa-shopping-bag"></i> Gel&Al Mevcut
                                        </span>
                                    }
                                </div>
                            </a>
                        </td>
                        <td>
                            <div class="quantity-control">
                                <button type="button" class="quantity-btn quantity-decrease">-</button>
                                <input type="number" class="quantity-input" value="@item.Quantity" min="1" max="99" />
                                <button type="button" class="quantity-btn quantity-increase">+</button>
                            </div>
                        </td>
                        <td class="item-price">@item.UnitPrice.ToString("C")</td>
                        <td class="item-total">@((item.Quantity * item.UnitPrice).ToString("C"))</td>
                        <td>
                            <button class="btn btn-danger btn-remove" onclick="removeFromCart(@item.ProductId)">Kaldır</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <h3 class="cart-total">Toplam: <span id="cart-total-amount">@Model.CartItems.Sum(ci => ci.Quantity * ci.UnitPrice).ToString("C")</span></h3>
        <div class="text-right">
            <button class="btn btn-success btn-checkout" onclick="toggleCheckoutForm()">Ödeme Yap</button>
        </div>

        <div id="checkout-form" class="checkout-form-container" style="display: none;">
            <h3 class="checkout-form-title">Ödeme Bilgileri</h3>
            <form id="checkoutForm">
                <div class="form-group" id="click-collect-option">
                    <div class="click-collect-container">
                        <input type="checkbox" id="IsClickAndCollect" name="IsClickAndCollect" value="true" />
                        <label for="IsClickAndCollect">
                            <i class="fas fa-shopping-bag"></i> Gel&Al Kullan
                            <span class="click-collect-info">(Mağazadan Teslim)</span>
                        </label>
                        <p class="click-collect-description">
                            Siparişinizi mağazadan teslim almak için Gel&Al'ı seçin. Sadece "Gel&Al Mevcut" işaretli ürünler bu seçenek için uygundur.
                        </p>
                        <div id="click-collect-eligible" class="click-collect-eligible hidden">
                            <p class="eligible-title">Bu ürünler Gel&Al için uygundur:</p>
                            <ul id="eligible-products" class="eligible-products-list">
                                <!-- JavaScript ile doldurulacak -->
                            </ul>
                        </div>
                    </div>
                </div>

                <div id="shipping-details">
                    <div class="form-group">
                        <label for="RecipientName">Alıcı Adı:</label>
                        <input type="text" id="RecipientName" name="RecipientName" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="ShippingCompany">Kargo Şirketi:</label>
                        <select id="ShippingCompany" name="ShippingCompany" class="form-control" required>
                            <option value="Aras Kargo">Aras Kargo</option>
                            <option value="Yurtiçi Kargo">Yurtiçi Kargo</option>
                            <option value="Mng">Mng</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="Address">Adres:</label>
                        <input type="text" id="Address" name="Address" class="form-control" value="@ViewBag.Address" required />
                    </div>

                    <div class="form-group">
                        <label for="PhoneNumber">Telefon Numarası:</label>
                        <input type="tel" id="PhoneNumber" name="PhoneNumber" class="form-control" value="@ViewBag.PhoneNumber" required />
                    </div>

                    <div class="form-group">
                        <label for="CardholderName">Kart Sahibinin Adı:</label>
                        <input type="text" id="CardholderName" name="CardholderName" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="CardInfo">Kart Numarası:</label>
                        <input type="text" id="CardInfo" name="CardInfo" class="form-control" placeholder="1234-5678-9012-3456" maxlength="19" required />
                    </div>

                    <div class="form-group">
                        <label for="ExpirationDate">Son Kullanma Tarihi:</label>
                        <input type="text" id="ExpirationDate" name="ExpirationDate" class="form-control" placeholder="AA/YY" maxlength="5" required />
                    </div>

                    <div class="form-group">
                        <label for="CVV">CVV:</label>
                        <input type="text" id="CVV" name="CVV" class="form-control" placeholder="123" maxlength="3" required />
                    </div>

                    <button type="button" class="btn btn-primary" onclick="submitCheckout()">Siparişi Tamamla</button>
                </div>
            </form>
        </div>
    }
</div>


<script>
function removeFromCart(productId) {
    $.ajax({
        url: '@Url.Action("RemoveFromCart", "Cart")',
        type: 'POST',
        data: { productId: productId },
        success: function (response) {
            if (response.success) {
                alert("Ürün sepetinizden başarıyla kaldırıldı.");
                location.reload();
            } else {
                alert("Ürün kaldırılamadı: " + response.message);
            }
        },
        error: function () {
            alert("Ürünü kaldırırken bir hata oluştu. Lütfen daha sonra tekrar deneyin.");
        }
    });
}

function updateQuantity(productId, quantity) {
    $.ajax({
        url: '@Url.Action("UpdateQuantity", "Cart")',
        type: 'POST',
        data: { productId: productId, quantity: quantity },
        success: function (response) {
            if (response.success) {
                // Ürün toplamını güncelle
                const row = $(`.cart-item[data-id="${productId}"]`);
                row.find('.item-total').text(response.itemTotal);
                
                // Sepet toplamını güncelle
                $('#cart-total-amount').text(response.cartTotal);
            } else {
                alert("Miktar güncellenemedi: " + response.message);
            }
        },
        error: function () {
            alert("Miktarı güncellerken bir hata oluştu. Lütfen daha sonra tekrar deneyin.");
        }
    });
}

$(document).ready(function() {
    // Handle quantity increase button
    $('.quantity-increase').click(function() {
        const input = $(this).siblings('.quantity-input');
        const newValue = parseInt(input.val()) + 1;
        if (newValue <= 99) {
            input.val(newValue);
            const productId = $(this).closest('.cart-item').data('id');
            updateQuantity(productId, newValue);
        }
    });
    
    // Handle quantity decrease button
    $('.quantity-decrease').click(function() {
        const input = $(this).siblings('.quantity-input');
        const newValue = parseInt(input.val()) - 1;
        if (newValue >= 1) {
            input.val(newValue);
            const productId = $(this).closest('.cart-item').data('id');
            updateQuantity(productId, newValue);
        }
    });
    
    // Handle direct input changes
    $('.quantity-input').on('change', function() {
        let value = parseInt($(this).val());
        
        // Validate quantity
        if (isNaN(value) || value < 1) {
            value = 1;
        } else if (value > 99) {
            value = 99;
        }
        
        $(this).val(value);
        const productId = $(this).closest('.cart-item').data('id');
        updateQuantity(productId, value);
    });
    
    // Process click & collect checkbox
    $('#IsClickAndCollect').on('change', function() {
        const isChecked = $(this).is(':checked');
        
        if (isChecked) {
            // Show eligible products
            const eligibleProducts = [];
            const nonEligibleProducts = [];
            
            $('.cart-item').each(function() {
                const isEligible = $(this).data('click-collect') === 1;
                const productName = $(this).find('.cart-product-content span:first').text();
                
                if (isEligible) {
                    eligibleProducts.push(productName);
                } else {
                    nonEligibleProducts.push(productName);
                }
            });
            
            if (eligibleProducts.length > 0) {
                $('#eligible-products').empty();
                eligibleProducts.forEach(name => {
                    $('#eligible-products').append(`<li><i class="fas fa-check text-success"></i> ${name}</li>`);
                });
                $('#click-collect-eligible').removeClass('hidden');
                
                // Sadece kargo şirketi ve adres alanlarını gizle
                $('#ShippingCompany').closest('.form-group').hide();
                $('#Address').closest('.form-group').hide();
                $('#ShippingCompany').prop('required', false); 
                $('#Address').prop('required', false);
                
                // Eğer uygun olmayan ürünler varsa uyarı göster
                if (nonEligibleProducts.length > 0) {
                    const warningMsg = "Dikkat! Aşağıdaki ürünler Gel&Al için uygun değildir ve normal kargo ile teslim edilecektir: " + 
                                     nonEligibleProducts.join(", ");
                    alert(warningMsg);
                }
            } else {
                alert("Sepetinizde Gel&Al için uygun ürün bulunmamaktadır. Lütfen ürün detay sayfasından 'Gel&Al Mevcut' yazısına sahip ürünleri ekleyin.");
                $(this).prop('checked', false);
                $('#click-collect-eligible').addClass('hidden');
            }
        } else {
            $('#click-collect-eligible').addClass('hidden');
            // Sadece kargo şirketi ve adres alanlarını göster
            $('#ShippingCompany').closest('.form-group').show();
            $('#Address').closest('.form-group').show();
            $('#ShippingCompany').prop('required', true); 
            $('#Address').prop('required', true);
        }
    });
    
    // Sayfa yüklendiğinde başlangıç durumunu ayarla
    // Gel&Al checkbox'ının başlangıç durumunu kontrol et
    if ($('#IsClickAndCollect').is(':checked')) {
        // Sadece kargo şirketi ve adres alanlarını gizle
        $('#ShippingCompany').closest('.form-group').hide();
        $('#Address').closest('.form-group').hide();
        $('#ShippingCompany').prop('required', false); 
        $('#Address').prop('required', false);
    }
    
    // Tüm form alanlarına placeholder ve açıklama ekleme
    $('#CardholderName').attr('placeholder', 'Kart üzerindeki ad soyad');
    
    // Sayfa yüklendiğinde sepetteki ürünleri kontrol et
    const hasEligibleProduct = checkEligibleProducts();
    if (!hasEligibleProduct) {
        $('#click-collect-option').hide();
    }
    
    // Sepetteki ürünlerin Gel&Al uygunluğunu kontrol et
    function checkEligibleProducts() {
        let hasEligible = false;
        $('.cart-item').each(function() {
            if ($(this).data('click-collect') === 1) {
                hasEligible = true;
                return false; // döngüden çık
            }
        });
        return hasEligible;
    }
});

function toggleCheckoutForm() {
    $('#checkout-form').slideToggle();
}

function submitCheckout() {
    // Validate form
    const formData = {
        RecipientName: $('#RecipientName').val(),
        PhoneNumber: $('#PhoneNumber').val(),
        CardholderName: $('#CardholderName').val(),
        CardInfo: $('#CardInfo').val(),
        ExpirationDate: $('#ExpirationDate').val(),
        CVV: $('#CVV').val(),
        IsClickAndCollect: $('#IsClickAndCollect').is(':checked')
    };
    
    // Gel&Al seçili değilse kargo bilgilerini ekle
    if (!formData.IsClickAndCollect) {
        formData.ShippingCompany = $('#ShippingCompany').val();
        formData.Address = $('#Address').val();
    }
    
    // Clear previous error messages
    $('.form-error').remove();
    $('.is-invalid').removeClass('is-invalid');
    
    // Validate form
    let isValid = true;
    
    function showFieldError(fieldId, message) {
        $('#' + fieldId).after(`<span class="text-danger form-error">${message}</span>`);
        $('#' + fieldId).addClass('is-invalid');
    }
    
    // Her durumda doğrulanması gereken alanlar
    if (!formData.RecipientName || !formData.RecipientName.trim()) {
        showFieldError("RecipientName", "Lütfen alıcı adını giriniz.");
        isValid = false;
    }
    
    if (!formData.PhoneNumber || !formData.PhoneNumber.trim()) {
        showFieldError("PhoneNumber", "Lütfen telefon numaranızı giriniz.");
        isValid = false;
    }
    
    // Gel&Al seçili değilse kargo alanlarını doğrula
    if (!formData.IsClickAndCollect) {
        if (!formData.ShippingCompany || !formData.ShippingCompany.trim()) {
            showFieldError("ShippingCompany", "Lütfen bir kargo şirketi seçiniz.");
            isValid = false;
        }
        
        if (!formData.Address || !formData.Address.trim()) {
            showFieldError("Address", "Lütfen teslimat adresinizi giriniz.");
            isValid = false;
        }
    }
    
    if (!formData.CardholderName || !formData.CardholderName.trim()) {
        showFieldError("CardholderName", "Lütfen kart sahibinin adını giriniz.");
        isValid = false;
    }
    
    // Kart numarası validasyonu - format olarak 1234-5678-1234-5678 şeklinde
    const cardNumber = formData.CardInfo.replace(/-/g, ""); // Tireleri kaldır
    if (!formData.CardInfo || !formData.CardInfo.trim() || !/^\d{4}-\d{4}-\d{4}-\d{4}$/.test(formData.CardInfo)) {
        showFieldError("CardInfo", "Lütfen geçerli bir 16 haneli kart numarası giriniz.");
        isValid = false;
    }
    
    // Son kullanma tarihi validasyonu - format olarak MM/YY
    if (!formData.ExpirationDate || !formData.ExpirationDate.trim() || !/^\d{2}\/\d{2}$/.test(formData.ExpirationDate)) {
        showFieldError("ExpirationDate", "Lütfen geçerli bir son kullanma tarihi giriniz (AA/YY).");
        isValid = false;
    }
    
    // CVV validasyonu
    if (!formData.CVV || !formData.CVV.trim() || !/^\d{3}$/.test(formData.CVV)) {
        showFieldError("CVV", "Lütfen geçerli bir CVV kodu giriniz.");
        isValid = false;
    }
    
    if (!isValid) {
        return;
    }
    
    // Submit order
    const submitButton = document.querySelector('.btn-primary');
    const originalText = submitButton.innerHTML;
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> İşleniyor...';
    submitButton.disabled = true;
    
    function showSuccessMessage(message) {
        const container = document.querySelector('.cart-container');
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success mt-3';
        alertDiv.innerHTML = message;
        container.prepend(alertDiv);
    }
    
    function showErrorMessage(message) {
        const container = document.querySelector('.cart-container');
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger mt-3';
        alertDiv.innerHTML = message;
        container.prepend(alertDiv);
    }
    
    $.ajax({
        url: '@Url.Action("Checkout", "Cart")',
        type: 'POST',
        data: formData,
        timeout: 10000,
        success: function (response) {
            if (response.success) {
                showSuccessMessage("Siparişiniz başarıyla oluşturuldu. Alışverişiniz için teşekkür ederiz!");
                // Redirect after a short delay to show the success message
                setTimeout(() => {
                    window.location.href = '@Url.Action("Index", "Cart")';
                }, 2000);
            } else {
                showErrorMessage("Siparişiniz oluşturulamadı: " + response.message);
                submitButton.innerHTML = originalText;
                submitButton.disabled = false;
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            if (textStatus === "timeout") {
                showErrorMessage("Ödeme işlemi zaman aşımına uğradı. Lütfen tekrar deneyin.");
            } else {
                showErrorMessage("Ödeme işlemi sırasında bir hata oluştu: " + errorThrown);
            }
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;
        }
    });
}

// Kart numarası formatlaması
$('#CardInfo').on('input', function() {
    let value = $(this).val().replace(/\D/g, ''); // Sadece rakamları al
    
    if (value.length > 16) {
        value = value.substr(0, 16); // Maximum 16 rakam
    }
    
    // 4'lü gruplara böl
    let formatted = '';
    for (let i = 0; i < value.length; i++) {
        if (i > 0 && i % 4 === 0) {
            formatted += '-';
        }
        formatted += value[i];
    }
    
    $(this).val(formatted);
});

// Son kullanma tarihi formatlaması
$('#ExpirationDate').on('input', function() {
    let value = $(this).val().replace(/\D/g, ''); // Sadece rakamları al
    
    if (value.length > 4) {
        value = value.substr(0, 4); // Maximum 4 rakam
    }
    
    // MM/YY formatı
    if (value.length > 2) {
        value = value.substr(0, 2) + '/' + value.substr(2);
    }
    
    $(this).val(value);
});

// CVV formatlaması - sadece rakam girişine izin ver
$('#CVV').on('input', function() {
    let value = $(this).val().replace(/\D/g, ''); // Sadece rakamları al
    
    if (value.length > 3) {
        value = value.substr(0, 3); // Maximum 3 rakam
    }
    
    $(this).val(value);
});
</script>

<style>
    .cart-container {
        max-width: 900px;
        margin: 50px auto;
        background: linear-gradient(145deg, #ffffff, #f1f1f1);
        border-radius: 12px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        padding: 30px;
    }

    .cart-title {
        font-size: 32px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 30px;
        color: #333;
        text-transform: uppercase;
        letter-spacing: 1.5px;
    }

    .cart-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        border-radius: 10px;
        overflow: hidden;
    }

        .cart-table th,
        .cart-table td {
            padding: 15px;
            text-align: center;
        }

        .cart-table th {
            background: #4CAF50;
            color: #fff;
            font-size: 18px;
            font-weight: bold;
            text-transform: uppercase;
        }

        .cart-table td {
            background: #fff;
            color: #444;
            font-size: 16px;
            vertical-align: middle;
        }

        .cart-table tr:nth-child(even) td {
            background: #f9f9f9;
        }

    .product-cell-link {
        display: block;
        text-decoration: none;
        color: inherit;
        width: 100%;
        height: 100%;
    }

    .cart-product-content {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .cart-product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 8px;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    }
    
    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
    }
    
    .quantity-input {
        width: 50px;
        text-align: center;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .quantity-btn {
        width: 30px;
        height: 30px;
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .quantity-btn:hover {
        background-color: #e0e0e0;
    }

    .cart-total {
        text-align: right;
        font-size: 22px;
        font-weight: bold;
        color: #333;
        margin-top: 20px;
    }

    .btn-remove {
        background-color: #FF5555;
        color: #fff;
        border: none;
        padding: 8px 20px;
        cursor: pointer;
        border-radius: 5px;
        font-size: 14px;
        font-weight: bold;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-remove:hover {
            background-color: #E04444;
            transform: scale(1.05);
        }

    .btn-checkout {
        background-color: #4CAF50;
        color: #fff;
        border: none;
        padding: 12px 30px;
        cursor: pointer;
        border-radius: 5px;
        font-size: 18px;
        font-weight: bold;
        display: inline-block;
        margin-top: 20px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-checkout:hover {
            background-color: #45A049;
            transform: translateY(-2px);
        }

    .empty-cart-message {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: #999;
        margin-top: 50px;
    }

    /* Checkout Form Styles */
    .checkout-form-container {
        margin-top: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Click & Collect Styles */
    .click-collect-badge {
        display: inline-block;
        background-color: #6f42c1;
        color: white;
        font-size: 0.75em;
        padding: 2px 6px;
        border-radius: 4px;
        margin-left: 10px;
        font-weight: bold;
    }

    .click-collect-container {
        background-color: #f0f0ff;
        border: 1px solid #d0d0ff;
        border-radius: 6px;
        padding: 15px;
        margin-bottom: 20px;
    }

    .click-collect-container label {
        font-weight: bold;
        font-size: 16px;
        margin-left: 10px;
        color: #333;
    }

    .click-collect-info {
        font-size: 14px;
        color: #666;
        font-weight: normal;
        margin-left: 5px;
    }

    .click-collect-description {
        margin: 10px 0 0 30px;
        font-size: 14px;
        color: #555;
    }

    .click-collect-eligible {
        margin-top: 15px;
        background-color: #fff;
        border: 1px dashed #ccc;
        border-radius: 4px;
        padding: 10px;
    }

    .eligible-title {
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
    }

    .eligible-products-list {
        list-style-type: none;
        padding-left: 10px;
    }

    .eligible-products-list li {
        padding: 5px 0;
        border-bottom: 1px solid #eee;
    }

    .hidden {
        display: none;
    }

    .checkout-form-title {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .form-group {
        margin-bottom: 15px;
        position: relative;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        transition: border-color 0.3s;
    }
    
    .form-control.field-error {
        border-color: #dc3545;
        background-color: #fff8f8;
    }
    
    .checkout-error {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        font-weight: bold;
    }
    
    .alert {
        padding: 12px 15px;
        margin-bottom: 15px;
        border: 1px solid transparent;
        border-radius: 4px;
    }
    
    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
    
    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
        
        .btn-primary:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .cart-container {
            padding: 20px;
        }

        .cart-table th,
        .cart-table td {
            font-size: 14px;
            padding: 10px;
        }

        .cart-product-content {
            flex-direction: column;
            align-items: center;
        }

        .cart-product-image {
            width: 100px;
            height: 100px;
        }

        .btn-checkout {
            width: 100%;
        }

        .cart-title {
            font-size: 24px;
        }
        
        .quantity-control {
            flex-direction: row;
        }
        
        .quantity-input {
            width: 40px;
            font-size: 14px;
        }
        
        .quantity-btn {
            width: 28px;
            height: 28px;
        }
    }
    
    /* Extra small screens */
    @@media (max-width: 576px) {
        .cart-table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }
    }

    /* Gel&Al Badge */
    .gel-al-badge {
        display: inline-flex;
        align-items: center;
        background-color: #6f42c1;
        color: white;
        border-radius: 4px;
        padding: 3px 8px;
        font-weight: bold;
        margin-left: 8px;
        font-size: 12px;
    }
    
    /* Payment Methods */
    .payment-section {
        margin-top: 20px;
        border-top: 1px solid #ddd;
        padding-top: 15px;
    }
    
    .payment-section-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    
    .form-control.is-invalid {
        border-color: #dc3545;
        background-color: #fff8f8;
    }

    /* İsProcessing sırasında loader gösterimi */
    .spinner-border {
        display: inline-block;
        width: 1.5rem;
        height: 1.5rem;
        vertical-align: middle;
        border: 0.2em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to { transform: rotate(360deg); }
    }
</style>
