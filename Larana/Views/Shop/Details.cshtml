<div class="product-page">
    <div class="product-left">
        <div class="product-main-image">
            <img src="@Url.Content("~/" + Model.PhotoPath)" alt="@Model.Name">
        </div>
    </div>

    <div class="product-right">
        <h1 class="product-title">@Model.Name</h1>
        <h2 class="product-price">@string.Format("{0:N}", Model.Price) TL</h2>
        <h4 class="product-brand">Marka: @Model.Brand</h4>
        <h4 class="product-category">Kategori: @Model.Category</h4>
        <div class="product-seller">
            <h4>Satıcı: 
                @if (Model.Dukkan != null)
                {
                    <a href="@Url.Action("Details", "Dukkan", new { id = Model.DukkanId })" class="seller-link">
                        @Model.Dukkan.Name
                    </a>
                }
                else
                {
                    <span>Bilinmiyor</span>
                }
            </h4>
        </div>
        @if (Model.IsClickAndCollect)
        {
            <div class="click-collect-info">
                <span class="click-collect-badge-large">
                    <i class="fas fa-shopping-bag"></i> Gel&Al
                </span>
                <span class="click-collect-description">Bu ürün mağazadan teslim alınabilir</span>
            </div>
        }
        <h4 class="product-stock" id="stock-count">Stok: @Model.Stock</h4>

        <!-- Price Comparison Section -->
        @{
            var shopProducts = ViewBag.ShopProducts as List<Larana.Models.ShopProduct>;
            var hasMultipleSellers = shopProducts != null && shopProducts.Count > 0;
        }
        @if (hasMultipleSellers)
        {
            <div class="price-comparison-section">
                <h4>Diğer satıcılardan mevcut:</h4>
                <div class="price-comparison-table">
                    @foreach (var sp in shopProducts)
                    {
                        <div class="price-comparison-row">
                            <div class="seller-name">
                                <a href="@Url.Action("Details", "Dukkan", new { id = sp.DukkanId })">@sp.Dukkan.Name</a>
                            </div>
                            <div class="seller-price">@string.Format("{0:N}", sp.Price) TL</div>
                            <div class="seller-stock">Stok: @sp.Stock</div>
                            <div class="seller-action">
                                @if (sp.Stock > 0)
                                {
                                    <button class="btn btn-sm btn-buy" onclick="addToCartFromSeller(@sp.Id, 1)">Satın Al</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-secondary" disabled>Stokta Yok</button>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Store Owner Action Section -->
        @if ((ViewBag.IsSeller == true || User.IsInRole("Seller")) && ViewBag.CanSellInOwnShop == true)
        {
            <div class="store-owner-actions">
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#sellProductModal">
                    <i class="fas fa-store"></i> Bu ürünü mağazanızda satın
                </button>
            </div>
        }

        <div class="product-actions">
            @if (User.Identity.IsAuthenticated)
            {
                <div class="quantity-wrapper">
                    <label for="quantity">Adet:</label>
                    <div class="quantity-control">
                        <button type="button" class="quantity-btn" id="decrease-quantity">-</button>
                        <input type="number" id="quantity" value="1" min="1" max="@Model.Stock" />
                        <button type="button" class="quantity-btn" id="increase-quantity">+</button>
                    </div>
                </div>
                <button class="btn btn-add-to-cart" id="add-to-cart-btn" onclick="virtualAddToCart(@Model.Id, document.getElementById('quantity').value, @Model.Stock)">Sepete Ekle</button>
            }
            else
            {
                <button class="btn btn-add-to-cart" disabled>Sepete Eklemek İçin Giriş Yapın</button>
            }
        </div>

        <div class="product-info-box">
            <h4>Teslimat Bilgileri</h4>
            <p>Hızlı teslimat seçenekleri mevcut!</p>
        </div>
    </div>
</div>

<!-- Ürün Açıklama Bölümü -->
<div class="product-section">
    <h3>Ürün Açıklaması</h3>
    <div class="product-description-content">
        @if (!string.IsNullOrEmpty(Model.Description))
        {
            <p>@Model.Description</p>
        }
        else
        {
            <p class="no-description">Bu ürün için henüz açıklama eklenmemiştir.</p>
        }
    </div>
</div>

<div class="product-reviews">
    <h3>Müşteri Değerlendirmeleri</h3>
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }
    
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }
    
    @if (ViewBag.UserCanReview)
    {
        <div class="review-form">
            <h4>Değerlendirme Yazın</h4>
            @using (Html.BeginForm("AddReview", "Shop", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <input type="hidden" name="productId" value="@Model.Id" />
                
                <div class="form-group">
                    <label for="rating">Puanlama</label>
                    <div class="rating-input">
                        <input type="radio" id="star5" name="rating" value="5" required />
                        <label for="star5" title="5 yıldız">&#9733;</label>
                        <input type="radio" id="star4" name="rating" value="4" />
                        <label for="star4" title="4 yıldız">&#9733;</label>
                        <input type="radio" id="star3" name="rating" value="3" />
                        <label for="star3" title="3 yıldız">&#9733;</label>
                        <input type="radio" id="star2" name="rating" value="2" />
                        <label for="star2" title="2 yıldız">&#9733;</label>
                        <input type="radio" id="star1" name="rating" value="1" />
                        <label for="star1" title="1 yıldız">&#9733;</label>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="comment">Yorumunuz</label>
                    <textarea id="comment" name="comment" class="form-control" rows="4" required maxlength="500"></textarea>
                </div>
                
                <button type="submit" class="btn btn-primary">Değerlendirme Gönder</button>
            }
        </div>
    }
    else if (ViewBag.HasReviewed)
    {
        <div class="alert alert-info">
            Bu ürünü zaten değerlendirdiniz.
        </div>
    }
    else if (User.Identity.IsAuthenticated)
    {
        <div class="alert alert-warning">
            Sadece satın aldığınız ürünleri değerlendirebilirsiniz.
        </div>
    }
    
    <div class="reviews-container">
        @if (ViewBag.SortedReviews != null && ViewBag.SortedReviews.Count > 0)
        {
            foreach (var review in ViewBag.SortedReviews)
            {
                <div class="review">
                    <div class="review-header">
                        <div class="review-stars">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= review.Rating)
                                {
                                    <span class="star filled">&#9733;</span>
                                }
                                else
                                {
                                    <span class="star">&#9734;</span>
                                }
                            }
                        </div>
                        <span class="review-date">@review.CreatedAt.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR"))</span>
                    </div>
                    <div class="review-author">@review.User.Username</div>
                    <div class="review-text">@review.Comment</div>
                    @{
                        var purchaseInfoByUser = ViewBag.PurchaseInfoByUser as Dictionary<int, Larana.Models.OrderDetail>;
                        if (purchaseInfoByUser != null && purchaseInfoByUser.ContainsKey(review.UserId))
                        {
                            var orderDetail = purchaseInfoByUser[review.UserId];
                            if (orderDetail.ShopProductId > 0 && orderDetail.ShopProduct?.Dukkan != null)
                            {
                                <div class="bought-from-tag">
                                    satın alındığı yer: <strong>@orderDetail.ShopProduct.Dukkan.Name</strong>
                                </div>
                            }
                            else if (orderDetail.ProductId > 0 && orderDetail.Product?.Dukkan != null)
                            {
                                <div class="bought-from-tag">
                                    satın alındığı yer: <strong>@orderDetail.Product.Dukkan.Name</strong>
                                </div>
                            }
                            else
                            {
                                <div class="bought-from-tag">
                                    satın alındığı yer: <strong>Larana</strong>
                                </div>
                            }
                        }
                    }
                </div>
            }
        }
        else
        {
            <div class="no-reviews">
                <p>Bu ürün henüz değerlendirilmemiş.</p>
            </div>
        }
    </div>
</div>

<div class="product-section">
    <h3>Benzer Ürünler</h3>
    <div class="products">
        @foreach (var product in ViewBag.RelatedProducts)
        {
            <div class="product">
                <a href="@Url.Action("Details", "Shop", new { id = product.Id })">
                    <img class="sneaker" src="@Url.Content("~/" + product.PhotoPath)" alt="@product.Name" />
                    <div class="description">
                        <h5>@product.Name</h5>
                        <h4>@string.Format("{0:N}", product.Price) TL</h4>
                        @if (product.Dukkan != null)
                        {
                            <span class="related-seller">
                                <i class="fas fa-store"></i> @product.Dukkan.Name
                            </span>
                        }
                    </div>
                </a>
            </div>
        }
    </div>
</div>

<script>
    function virtualAddToCart(productId, quantity, initialStock) {
        const stockCountElement = document.getElementById('stock-count');
        const addToCartButton = document.querySelector('.btn-add-to-cart');
        quantity = parseInt(quantity);

        const currentStock = parseInt(stockCountElement.textContent.replace('Stok: ', ''));
        if (currentStock <= 0 || quantity > currentStock) {
            alert("Yeterli stok bulunmuyor!");
            return;
        }

        const newStock = currentStock - quantity;
        stockCountElement.textContent = `Stok: ${newStock}`;

        if (newStock <= 0) {
            addToCartButton.disabled = true;
            addToCartButton.textContent = 'Stokta Yok';
        }

        $.ajax({
            url: '@Url.Action("AddToCart", "Shop")',
            type: 'POST',
            data: { productId: productId, quantity: quantity },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                } else {
                    alert(response.message);
                }
            },
            error: function () {
                alert("Ürün sepete eklenirken bir hata oluştu.");
            }
        });
    }

    function addToCartFromSeller(shopProductId, quantity) {
        $.ajax({
            url: '@Url.Action("AddToCartFromSeller", "Shop")',
            type: 'POST',
            data: { shopProductId: shopProductId, quantity: quantity },
            success: function(response) {
                if (response.success) {
                    alert("Ürün sepetinize başarıyla eklendi!");
                    // Gerekirse stok gösterimini güncelle
                    location.reload(); // Basit yaklaşım - sayfayı yenile
                } else {
                    alert(response.message);
                }
            },
            error: function() {
                alert("Bir hata oluştu. Lütfen tekrar deneyin.");
            }
        });
    }

    // Miktar kontrollerini başlat
    $(document).ready(function() {
        const quantityInput = document.getElementById('quantity');
        const increaseBtn = document.getElementById('increase-quantity');
        const decreaseBtn = document.getElementById('decrease-quantity');
        const maxStock = @Model.Stock;
        
        if (increaseBtn && decreaseBtn && quantityInput) {
            increaseBtn.addEventListener('click', function() {
                let value = parseInt(quantityInput.value);
                if (value < maxStock) {
                    quantityInput.value = value + 1;
                }
            });
            
            decreaseBtn.addEventListener('click', function() {
                let value = parseInt(quantityInput.value);
                if (value > 1) {
                    quantityInput.value = value - 1;
                }
            });
            
            quantityInput.addEventListener('change', function() {
                let value = parseInt(this.value);
                if (isNaN(value) || value < 1) {
                    this.value = 1;
                } else if (value > maxStock) {
                    this.value = maxStock;
                }
            });
        }
    });
</script>

<style>
    /* General Page Styling */
    body {
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f9f9f9;
        color: #333;
    }

    /* Product Page Styling */
    .product-page {
        display: flex;
        gap: 30px;
        max-width: 1200px;
        margin: 50px auto;
        padding: 30px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .product-left {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .product-main-image img {
        width: 100%;
        max-width: 500px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .product-right {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .product-title {
        font-size: 32px;
        font-weight: bold;
        color: #333;
    }

    .product-price {
        font-size: 28px;
        font-weight: bold;
        color: #007BFF;
    }

    .product-brand,
    .product-category {
        font-size: 18px;
        color: #555;
    }

    .product-seller h4 {
        font-size: 18px;
        color: #555;
        margin: 0;
    }

    .seller-link {
        color: #007BFF;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
    }

    .seller-link:hover {
        color: #0056b3;
        text-decoration: underline;
    }

    .product-stock {
        font-size: 18px;
        color: #555;
        margin: 10px 0;
    }
    
    /* Quantity Control Styling */
    .quantity-wrapper {
        margin-bottom: 15px;
    }
    
    .quantity-wrapper label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .quantity-control {
        display: flex;
        align-items: center;
        max-width: 150px;
    }
    
    .quantity-control input {
        width: 50px;
        text-align: center;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin: 0 5px;
    }
    
    .quantity-btn {
        width: 32px;
        height: 32px;
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .quantity-btn:hover {
        background-color: #e0e0e0;
    }

    /* Product Actions */
    .product-actions {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    /* Button Styling */
    .btn-add-to-cart {
        background-color: #007BFF;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
    }

        .btn-add-to-cart:hover {
            background-color: #0056b3;
        }

        .btn-add-to-cart:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

    /* Styling for alertify-like notification */
    .alertify {
        background-color: #f0f0f0;
        color: #333;
        font-size: 16px;
        padding: 10px;
        border-radius: 5px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin: 10px auto;
        max-width: 400px;
    }

    /* Related Products Section */
    .related-products {
        margin-top: 50px;
        padding: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    /* Ürün açıklama içeriği için stil */
    .product-description-content {
        font-size: 16px;
        line-height: 1.6;
        color: #555;
        padding: 10px 0;
    }
    
    .product-description-content p {
        margin-bottom: 15px;
    }
    
    .no-description {
        color: #888;
        font-style: italic;
    }

    .related-products h3 {
        font-size: 24px;
        font-weight: bold;
        color: #007BFF;
        margin-bottom: 20px;
    }

    .related-products .products {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
    }

    .related-products .product {
        flex: 1 1 calc(20% - 20px);
        max-width: calc(20% - 20px);
        box-sizing: border-box;
        text-align: left;
        border: 1px solid #007BFF;
        border-radius: 10px;
        padding: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background-color: #fff;
        margin: 10px;
    }

        .related-products .product:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
        }

        .related-products .product img {
            width: 100%;
            max-height: 250px;
            object-fit: contain;
            border-radius: 10px;
            margin-bottom: 10px;
        }

    .related-products .description {
        padding: 10px 0;
        text-align: left;
    }

        .related-products .description h5 {
            font-size: 16px;
            color: #333;
            margin: 5px 0;
            font-weight: bold;
        }

        .related-products .description h4 {
            font-size: 18px;
            font-weight: bold;
            color: #007BFF;
            margin-top: 5px;
        }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .related-products .product {
            flex: 1 1 calc(25% - 20px);
            max-width: calc(25% - 20px);
        }
    }

    @@media (max-width: 768px) {
        .product-page {
            flex-direction: column;
        }

        .product-left,
        .product-right {
            flex: 1;
        }

        .product-main-image img {
            max-width: 100%;
        }

        .related-products .product {
            flex: 1 1 calc(50% - 20px);
            max-width: calc(50% - 20px);
        }
    }

    @@media (max-width: 480px) {
        .related-products .product {
            flex: 1 1 calc(100% - 20px);
            max-width: calc(100% - 20px);
        }
    }

    /* Remove underline from all links */
    a {
        text-decoration: none;
        color: inherit;
        cursor: pointer;
    }

    /* Add styles for related-seller */
    .related-seller {
        display: block;
        font-size: 0.85em;
        color: #666;
        margin-top: 5px;
    }

    .related-seller i {
        color: #007BFF;
        margin-right: 4px;
    }

    /* Review Styles */
    .product-reviews {
        max-width: 1200px;
        margin: 50px auto;
        padding: 30px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .product-reviews h3 {
        font-size: 24px;
        margin-bottom: 20px;
        color: #333;
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 10px;
    }
    
    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 5px;
    }
    
    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
    
    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }
    
    .alert-info {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }
    
    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
    }
    
    .review-form {
        margin-bottom: 30px;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        border: 1px solid #eee;
    }
    
    .review-form h4 {
        margin-bottom: 15px;
        color: #333;
    }
    
    .form-group {
        margin-bottom: 15px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        resize: vertical;
    }
    
    .rating-input {
        display: flex;
        flex-direction: row-reverse;
        justify-content: flex-end;
    }
    
    .rating-input input {
        display: none;
    }
    
    .rating-input label {
        font-size: 30px;
        color: #ddd;
        cursor: pointer;
        margin-right: 5px;
    }
    
    .rating-input label:hover,
    .rating-input label:hover ~ label,
    .rating-input input:checked ~ label {
        color: #ffcc00;
    }
    
    .reviews-container {
        margin-top: 20px;
    }
    
    .review {
        border-bottom: 1px solid #eee;
        padding: 15px 0;
    }
    
    .review:last-child {
        border-bottom: none;
    }
    
    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
    }
    
    .review-stars {
        display: flex;
    }
    
    .star {
        font-size: 20px;
        color: #ddd;
    }
    
    .star.filled {
        color: #ffcc00;
    }
    
    .review-date {
        font-size: 14px;
        color: #777;
    }
    
    .review-author {
        font-weight: bold;
        margin-bottom: 8px;
        color: #007BFF;
    }
    
    .review-text {
        line-height: 1.5;
        color: #333;
    }
    
    .bought-from-tag {
        display: inline-block;
        margin-top: 10px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        padding: 4px 8px;
        font-size: 12px;
        color: #6c757d;
    }
    
    .bought-from-tag:before {
        content: "\f07a";
        font-family: "Font Awesome 5 Free";
        font-weight: 900;
        margin-right: 5px;
    }
    
    .no-reviews {
        text-align: center;
        padding: 20px;
        color: #777;
    }

    /* Price Comparison Section Styles */
    .price-comparison-section {
        margin: 20px 0;
        border: 1px solid #eee;
        border-radius: 8px;
        padding: 15px;
        background-color: #f9f9f9;
    }
    
    .price-comparison-section h4 {
        margin-bottom: 15px;
        font-size: 18px;
        color: #333;
    }
    
    .price-comparison-table {
        width: 100%;
    }
    
    .price-comparison-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
    
    .price-comparison-row:last-child {
        border-bottom: none;
    }
    
    .seller-name {
        flex: 2;
        font-weight: 500;
    }
    
    .seller-price {
        flex: 1;
        font-weight: bold;
        color: #e44d26;
    }
    
    .seller-stock {
        flex: 1;
        color: #666;
    }
    
    .seller-action {
        flex: 1;
        text-align: right;
    }
    
    .btn-buy {
        background-color: #4CAF50;
        color: white;
        border: none;
    }
    
    .btn-buy:hover {
        background-color: #45a049;
        color: white;
    }
    
    /* Store Owner Actions */
    .store-owner-actions {
        margin: 15px 0;
        padding: 10px;
        background-color: #f0f8ff;
        border-radius: 5px;
        border: 1px dashed #007bff;
    }

    .bought-from-tag {
        background-color: #f1f1f1;
        color: #555;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 12px;
        margin-top: 8px;
        display: inline-block;
    }

    /* Product Section Styles - both for description and related products */
    .product-section {
        max-width: 1200px;
        margin: 50px auto;
        padding: 30px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .product-section h3 {
        font-size: 24px;
        margin-bottom: 20px;
        color: #333;
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 10px;
    }

    .click-collect-badge {
        display: inline-block;
        background-color: #6f42c1;
        color: white;
        font-size: 0.75em;
        padding: 2px 6px;
        border-radius: 4px;
        margin-top: 5px;
        font-weight: bold;
    }
    
    .click-collect-badge-large {
        display: inline-block;
        background-color: #6f42c1;
        color: white;
        font-size: 1em;
        padding: 4px 12px;
        border-radius: 6px;
        margin-top: 5px;
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .click-collect-info {
        margin: 10px 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .click-collect-description {
        color: #666;
        font-size: 0.9em;
    }
</style>

@section Scripts {
    <script>
        // Mevcut scriptler...
        
        // Gönderimden sonra formu temizle
        $(document).ready(function() {
            if (@(TempData["SuccessMessage"] != null ? "true" : "false")) {
                $("#comment").val("");
                $("input[name='rating']").prop("checked", false);
            }
        });
    </script>
}

<!-- Satıcıların bu ürünü mağazalarına eklemesi için modal -->
@if (ViewBag.IsSeller == true || User.IsInRole("Seller"))
{
    <div class="modal fade" id="sellProductModal" tabindex="-1" aria-labelledby="sellProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="sellProductModalLabel">"@Model.Name" ürününü mağazanızda satın</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                </div>
                <div class="modal-body">
                    <form id="sellProductForm">
                        <div class="mb-3">
                            <label for="shop-select" class="form-label">Mağazanızı seçin:</label>
                            <select id="shop-select" class="form-select" required>
                                <option value="">Mağaza seçin</option>
                                @foreach (var shop in ViewBag.OwnerShops)
                                {
                                    <option value="@shop.Id">@shop.Name</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="product-price" class="form-label">Fiyat (TL):</label>
                            <input type="number" id="product-price" class="form-control" step="0.01" min="0.01" value="@Model.Price" required />
                        </div>
                        <div class="mb-3">
                            <label for="product-stock" class="form-label">Başlangıç Stoğu:</label>
                            <input type="number" id="product-stock" class="form-control" min="0" value="1" required />
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="is-click-collect">
                            <label class="form-check-label" for="is-click-collect">Gel&Al Mevcut</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary" id="submitSellProduct">Mağazama Ekle</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            $("#submitSellProduct").click(function() {
                var shopId = $("#shop-select").val();
                var price = $("#product-price").val();
                var stock = $("#product-stock").val();
                var isClickCollect = $("#is-click-collect").is(":checked");
                
                if (!shopId) {
                    alert("Lütfen bir mağaza seçin");
                    return;
                }
                
                if (!price || price <= 0) {
                    alert("Lütfen geçerli bir fiyat girin");
                    return;
                }
                
                $.ajax({
                    url: '@Url.Action("AddExistingProduct", "Dukkan")',
                    type: 'POST',
                    data: {
                        dukkanId: shopId,
                        productId: @Model.Id,
                        price: price,
                        stock: stock,
                        isClickAndCollect: isClickCollect
                    },
                    success: function(response) {
                        if (response.success) {
                            alert("Ürün mağazanıza başarıyla eklendi!");
                            // Modal'ı kapat
                            $('#sellProductModal').modal('hide');
                            // İsteğe bağlı: güncellenmiş satıcı listesini göstermek için sayfayı yenile
                            location.reload();
                        } else {
                            alert(response.message || "Ürün mağazanıza eklenirken hata oluştu");
                        }
                    },
                    error: function() {
                        alert("Bir hata oluştu. Lütfen tekrar deneyin.");
                    }
                });
            });
        });
    </script>
}


