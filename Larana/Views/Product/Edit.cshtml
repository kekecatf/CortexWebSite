@model Larana.Models.Product

@{
    ViewBag.Title = "Edit Product";
}

<div class="container mt-4">
    <div class="product-edit-header">
        <h2>Edit Product</h2>
        <p>Shop: @ViewBag.DukkanName</p>
    </div>

    @using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.DukkanId)
        @Html.HiddenFor(model => model.Sales)
        @Html.HiddenFor(model => model.PhotoPath)

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Name, "Product Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, "Description", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = "4" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Category, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (ViewBag.Categories != null && ViewBag.Categories.Count() > 0)
                    {
                        @Html.DropDownListFor(model => model.Category, ViewBag.Categories as SelectList, "-- Select Category --", new { @class = "form-control" })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.Category, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter category (e.g. Electronics, Clothing, etc.)" } })
                    }
                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Brand, "Brand", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (ViewBag.Brands != null && ViewBag.Brands.Count() > 0)
                    {
                        @Html.DropDownListFor(model => model.Brand, ViewBag.Brands as SelectList, "-- Select Brand --", new { @class = "form-control" })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter brand name" } })
                    }
                    @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, "Price", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0.01", min = "0.01", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Stock, "Stock", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control", type = "number", min = "0", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsClickAndCollect, "Click & Collect", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsClickAndCollect)
                        @Html.ValidationMessageFor(model => model.IsClickAndCollect, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Current Image</label>
                <div class="col-md-10">
                    @if (!string.IsNullOrEmpty(Model.PhotoPath))
                    {
                        <img src="@Model.PhotoPath" alt="@Model.Name" class="product-image-preview" />
                    }
                    else
                    {
                        <p class="text-muted">No image available</p>
                    }
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">New Image</label>
                <div class="col-md-10">
                    <input type="file" name="productImage" id="productImage" class="form-control-file" />
                    <small class="form-text text-muted">Upload a new photo to replace the current one (optional)</small>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save Changes" class="btn btn-primary" />
                    <a href="@Url.Action("Products", "Dukkan", new { id = Model.DukkanId })" class="btn btn-secondary">Back to Products</a>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .product-edit-header {
        margin-bottom: 20px;
    }

    .product-edit-header h2 {
        color: #007BFF;
        margin-bottom: 5px;
    }

    .product-edit-header p {
        color: #666;
        font-size: 16px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .control-label {
        font-weight: 600;
        color: #444;
    }

    .btn-primary {
        margin-right: 10px;
    }

    .product-image-preview {
        max-width: 200px;
        max-height: 200px;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px;
        margin-bottom: 10px;
    }
</style>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
} 