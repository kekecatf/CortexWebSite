@model IEnumerable<Larana.Models.Order>

@{
    ViewBag.Title = "Mağaza Siparişleri";
}

<div class="container">
    <div class="store-header">
        <h1>Mağaza Siparişleri</h1>
        <div class="store-actions">
            <a href="@Url.Action("Details", "Dukkan", new { id = ViewBag.DukkanId })" class="btn btn-primary">
                <i class="fas fa-store"></i> Mağazaya Dön
            </a>
        </div>
    </div>

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-info">
            @TempData["Message"]
        </div>
    }

    <div class="orders-section">
        <div class="order-filters">
            <select id="status-filter" class="form-control">
                <option value="">Tüm Durumlar</option>
                @foreach (var status in Enum.GetValues(typeof(Larana.Models.OrderStatus)))
                {
                    <option value="@status">@(status.ToString() == "Pending" ? "Beklemede" : 
                                             status.ToString() == "Processing" ? "İşleniyor" : 
                                             status.ToString() == "Shipped" ? "Gönderildi" : 
                                             status.ToString() == "Delivered" ? "Teslim Edildi" : 
                                             status.ToString() == "Completed" ? "Tamamlandı" : 
                                             status.ToString() == "Cancelled" ? "İptal Edildi" : status.ToString())</option>
                }
            </select>
            <select id="delivery-filter" class="form-control">
                <option value="">Tüm Teslimat Türleri</option>
                <option value="shipping">Standart Kargo</option>
                <option value="pickup">Gel&Al</option>
            </select>
            <select id="sort-order" class="form-control">
                <option value="date-desc">En Yeni</option>
                <option value="date-asc">En Eski</option>
                <option value="amount-desc">En Yüksek Tutar</option>
                <option value="amount-asc">En Düşük Tutar</option>
            </select>
        </div>

        <div class="orders-list">
            @foreach (var order in Model)
            {
                <div class="order-card" 
                     data-status="@order.Status"
                     data-date="@order.OrderDate.Ticks"
                     data-amount="@(order.TotalAmount.HasValue ? order.TotalAmount.Value : 0)"
                     data-delivery="@(order.IsClickAndCollect ? "pickup" : "shipping")">
                    <div class="order-header">
                        <h3>Sipariş #@order.Id</h3>
                        <span class="order-date">@order.OrderDate.ToString("dd.MM.yyyy HH:mm")</span>
                        <span class="order-status @order.Status.ToString().ToLower()">
                            @(order.Status.ToString() == "Pending" ? "Beklemede" : 
                             order.Status.ToString() == "Processing" ? "İşleniyor" : 
                             order.Status.ToString() == "Shipped" ? "Gönderildi" : 
                             order.Status.ToString() == "Delivered" ? "Teslim Edildi" : 
                             order.Status.ToString() == "Completed" ? "Tamamlandı" : 
                             order.Status.ToString() == "Cancelled" ? "İptal Edildi" : order.Status.ToString())
                        </span>
                        @if (order.IsClickAndCollect)
                        {
                            <span class="order-delivery pickup">Gel&Al</span>
                        }
                    </div>
                    <div class="order-details">
                        <div class="customer-info">
                            <h4>Müşteri Bilgileri</h4>
                            @if (order.IsClickAndCollect)
                            {
                                <p><strong>Teslimat Yöntemi:</strong> <span class="pickup-badge">Gel&Al (Mağazadan Teslim)</span></p>
                                <p><strong>Müşteri:</strong> @order.User.Username</p>
                            }
                            else
                            {
                                <p><strong>İsim:</strong> @order.RecipientName</p>
                                <p><strong>Telefon:</strong> @order.PhoneNumber</p>
                                <p><strong>Adres:</strong> @order.Address</p>
                                <p><strong>Kargo Adresi:</strong> @order.ShippingAddress</p>
                                <p><strong>Kargo:</strong> @order.ShippingCompany</p>
                                <p><strong>Ödeme Yöntemi:</strong> @order.PaymentMethod</p>
                                <p><strong>Ödeme Durumu:</strong> <span class="payment-status @order.PaymentStatus.ToString().ToLower()">
                                    @(order.PaymentStatus.ToString() == "Pending" ? "Beklemede" : 
                                     order.PaymentStatus.ToString() == "Processing" ? "İşleniyor" : 
                                     order.PaymentStatus.ToString() == "Completed" ? "Tamamlandı" : 
                                     order.PaymentStatus.ToString() == "Failed" ? "Başarısız" : 
                                     order.PaymentStatus.ToString() == "Refunded" ? "İade Edildi" : order.PaymentStatus.ToString())
                                </span></p>
                            }
                        </div>
                        <div class="order-items">
                            <h4>Sipariş Ürünleri</h4>
                            @if(order.OrderDetails == null || !order.OrderDetails.Any())
                            {
                                <div class="alert alert-warning">Bu sipariş için ürün bulunamadı.</div>
                            }
                            else
                            {
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Ürün</th>
                                            <th>Miktar</th>
                                            <th>Fiyat</th>
                                            <th>Toplam</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in order.OrderDetails)
                                        {
                                            <tr>
                                                <td>
                                                    @if(item.Product != null)
                                                    {
                                                        @item.Product.Name
                                                    }
                                                    else
                                                    {
                                                        <span class="text-danger">Ürün mevcut değil (ID: @item.ProductId)</span>
                                                    }
                                                </td>
                                                <td>@item.Quantity</td>
                                                <td>@item.UnitPrice.ToString("F2") TL</td>
                                                <td>@((item.Quantity * item.UnitPrice).ToString("F2")) TL</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="3" class="text-right"><strong>Toplam Tutar:</strong></td>
                                            <td><strong>@(order.TotalAmount.HasValue ? order.TotalAmount.Value.ToString("F2") : "0.00") TL</strong></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            }
                        </div>
                    </div>
                    <div class="order-actions">
                        @if (order.Status == Larana.Models.OrderStatus.Pending)
                        {
                            <form action="@Url.Action("UpdateOrderStatus", "Dukkan")" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="orderId" value="@order.Id" />
                                <input type="hidden" name="status" value="@Larana.Models.OrderStatus.Processing" />
                                <input type="hidden" name="dukkanId" value="@ViewBag.DukkanId" />
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-check"></i> İşleme Al
                                </button>
                            </form>
                        }
                        @if (order.Status == Larana.Models.OrderStatus.Processing)
                        {
                            <form action="@Url.Action("UpdateOrderStatus", "Dukkan")" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="orderId" value="@order.Id" />
                                <input type="hidden" name="status" value="@Larana.Models.OrderStatus.Shipped" />
                                <input type="hidden" name="dukkanId" value="@ViewBag.DukkanId" />
                                <button type="submit" class="btn btn-info">
                                    <i class="fas fa-truck"></i> Gönderildi Olarak İşaretle
                                </button>
                            </form>
                        }
                        @if (order.Status == Larana.Models.OrderStatus.Shipped)
                        {
                            <form action="@Url.Action("UpdateOrderStatus", "Dukkan")" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="orderId" value="@order.Id" />
                                <input type="hidden" name="status" value="@Larana.Models.OrderStatus.Delivered" />
                                <input type="hidden" name="dukkanId" value="@ViewBag.DukkanId" />
                                <button type="submit" class="btn btn-success">
                                    <i class="fas fa-check-circle"></i> Teslim Edildi Olarak İşaretle
                                </button>
                            </form>
                        }
                        @if (order.Status != Larana.Models.OrderStatus.Cancelled && order.Status != Larana.Models.OrderStatus.Delivered)
                        {
                            <form action="@Url.Action("UpdateOrderStatus", "Dukkan")" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="orderId" value="@order.Id" />
                                <input type="hidden" name="status" value="@Larana.Models.OrderStatus.Cancelled" />
                                <input type="hidden" name="dukkanId" value="@ViewBag.DukkanId" />
                                <button type="submit" class="btn btn-danger" onclick="return confirm('Bu siparişi iptal etmek istediğinizden emin misiniz?');">
                                    <i class="fas fa-times"></i> Siparişi İptal Et
                                </button>
                            </form>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .store-header {
        background-color: #f8f9fa;
        padding: 2rem;
        margin-bottom: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .store-actions {
        margin-top: 1rem;
    }

    .order-filters {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
        flex-wrap: wrap;
    }

    .form-control {
        min-width: 200px;
    }

    .order-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
        overflow: hidden;
    }

    .order-header {
        background-color: #f8f9fa;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .order-date {
        color: #6c757d;
    }

    .order-status {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-weight: bold;
    }

    .order-status.pending { background-color: #ffc107; color: #000; }
    .order-status.processing { background-color: #17a2b8; color: #fff; }
    .order-status.shipped { background-color: #007bff; color: #fff; }
    .order-status.delivered { background-color: #28a745; color: #fff; }
    .order-status.cancelled { background-color: #dc3545; color: #fff; }

    .payment-status {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-weight: bold;
    }
    .payment-status.pending { background-color: #ffc107; color: #000; }
    .payment-status.processing { background-color: #17a2b8; color: #fff; }
    .payment-status.completed { background-color: #28a745; color: #fff; }
    .payment-status.failed { background-color: #dc3545; color: #fff; }
    .payment-status.refunded { background-color: #6c757d; color: #fff; }

    .order-details {
        padding: 1rem;
    }

    .customer-info {
        margin-bottom: 1rem;
    }

    .customer-info h4 {
        color: #007bff;
        margin-bottom: 0.5rem;
    }

    .order-items {
        margin-top: 1rem;
    }

    .order-items h4 {
        color: #007bff;
        margin-bottom: 0.5rem;
    }

    .table {
        margin-bottom: 0;
    }

    .order-actions {
        padding: 1rem;
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .btn i {
        margin-right: 0.5rem;
    }

    .order-delivery.pickup {
        background-color: #6f42c1;
        color: #fff;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-weight: bold;
        margin-left: 10px;
    }

    .pickup-badge {
        background-color: #6f42c1;
        color: #fff;
        padding: 3px 8px;
        border-radius: 4px;
        font-weight: bold;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            function filterOrders() {
                const status = $('#status-filter').val();
                const delivery = $('#delivery-filter').val();
                const sortOrder = $('#sort-order').val();

                $('.order-card').each(function() {
                    const $card = $(this);
                    const cardStatus = $card.data('status');
                    const cardDelivery = $card.data('delivery');
                    
                    const statusMatch = !status || cardStatus === status;
                    const deliveryMatch = !delivery || cardDelivery === delivery;
                    $card.toggle(statusMatch && deliveryMatch);
                });

                // Sort orders
                const $ordersList = $('.orders-list');
                const $orders = $('.order-card').toArray();

                $orders.sort(function(a, b) {
                    const $a = $(a);
                    const $b = $(b);

                    switch(sortOrder) {
                        case 'date-desc':
                            return $b.data('date') - $a.data('date');
                        case 'date-asc':
                            return $a.data('date') - $b.data('date');
                        case 'amount-desc':
                            return $b.data('amount') - $a.data('amount');
                        case 'amount-asc':
                            return $a.data('amount') - $b.data('amount');
                        default:
                            return 0;
                    }
                });

                $ordersList.append($orders);
            }

            $('#status-filter, #delivery-filter, #sort-order').on('change', filterOrders);
        });
    </script>
} 