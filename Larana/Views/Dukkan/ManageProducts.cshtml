@model Larana.Models.Dukkan

@{
    ViewBag.Title = "Manage Products";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<!-- Direct Button for Products From Other Stores -->
<div class="row">
    <div class="col-12">
        <div class="alert alert-danger">
            <div class="d-flex align-items-center">
                <div class="flex-shrink-0 me-3">
                    <i class="fas fa-exclamation-triangle fa-3x"></i>
                </div>
                <div class="flex-grow-1">
                    <h3 class="mb-1">PRODUCTS FROM OTHER STORES</h3>
                    <p class="mb-2">Click the button below to manage products from other stores - update prices, stock levels, or remove them:</p>
                    <a href="@Url.Action("OtherProducts", "Dukkan", new { id = Model.Id })" class="btn btn-danger btn-lg">
                        <i class="fas fa-external-link-alt me-2"></i> MANAGE PRODUCTS FROM OTHER STORES
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Special Alert for Products from Other Stores -->
<div class="alert alert-warning mb-4">
    <div class="d-flex align-items-center">
        <div class="flex-shrink-0 me-3">
            <i class="fas fa-exclamation-circle fa-2x"></i>
        </div>
        <div class="flex-grow-1">
            <h4 class="alert-heading">Want to remove products from other stores?</h4>
            <p class="mb-0">To stop selling products you've added from other stores, please use our dedicated page:</p>
            <a href="@Url.Action("DiagnoseShopProducts", "Dukkan", new { dukkanId = Model.Id })" class="btn btn-warning mt-2">
                <i class="fas fa-exchange-alt me-2"></i> Manage Products From Other Stores
            </a>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex align-items-center mb-2">
                    <h4 class="mb-0 flex-grow-1">Manage Products</h4>
                    <a href="@Url.Action("OtherProducts", "Dukkan", new { id = Model.Id })" class="btn btn-danger btn-sm me-2">
                        <i class="fas fa-exchange-alt"></i> Products From Other Stores
                    </a>
                    <a href="@Url.Action("DiagnoseShopProducts", "Dukkan", new { dukkanId = Model.Id })" class="btn btn-warning btn-sm me-2">
                        <i class="fas fa-tools"></i> Manage Products From Other Stores
                    </a>
                    <a href="@Url.Action("ExistingProducts", "Dukkan", new { dukkanId = Model.Id })" class="btn btn-primary btn-sm me-2">
                        <i class="fas fa-search"></i> Browse Catalog
                    </a>
                    <a href="@Url.Action("AddProduct", "Dukkan", new { id = Model.Id })" class="btn btn-success btn-sm">
                        <i class="fas fa-plus"></i> Add New Product
                    </a>
                </div>
                <p class="text-muted">Add, edit, and organize products in your shop</p>
            </div>
        </div>
    </div>
</div>

<!-- Product Management Tools -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group mb-3">
            <input type="text" id="productSearch" class="form-control" placeholder="Search products...">
            <button class="btn btn-outline-secondary" type="button" id="btnClearSearch">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="col-md-3">
        <select id="productFilter" class="form-select">
            <option value="">All Products</option>
            <option value="in-stock">In Stock</option>
            <option value="out-of-stock">Out of Stock</option>
        </select>
    </div>
    <div class="col-md-3">
        <select id="productSort" class="form-select">
            <option value="custom">Custom Order</option>
            <option value="name-asc">Name (A-Z)</option>
            <option value="name-desc">Name (Z-A)</option>
            <option value="price-asc">Price (Low to High)</option>
            <option value="price-desc">Price (High to Low)</option>
            <option value="stock-asc">Stock (Low to High)</option>
            <option value="stock-desc">Stock (High to Low)</option>
        </select>
    </div>
</div>

<!-- Special Area for Products From Other Stores -->
<div class="row mt-4 mb-4">
    <div class="col-12">
        <div class="card bg-light">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-lg-8">
                        <h3 class="text-primary mb-1">Products Added From Other Stores</h3>
                        <p class="mb-0">Manage products you've added from other stores - update prices, stock levels, or remove them.</p>
                    </div>
                    <div class="col-lg-4 text-lg-end mt-3 mt-lg-0">
                        <a href="@Url.Action("OtherProducts", "Dukkan", new { id = Model.Id })" class="btn btn-primary btn-lg">
                            <i class="fas fa-external-link-alt me-2"></i> Manage Other Store Products
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Products List -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Products</h5>
                <div id="dragInstructions" class="small d-none">
                    <i class="fas fa-info-circle"></i> Drag products to reorder
                </div>
                <button id="btnSaveOrder" class="btn btn-sm btn-light d-none">
                    <i class="fas fa-save"></i> Save Order
                </button>
            </div>
            <div class="card-body p-0">
                @if (Model.Products != null && Model.Products.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 50px;">#</th>
                                    <th style="width: 80px;">Image</th>
                                    <th>Product Name</th>
                                    <th>Price</th>
                                    <th>Stock</th>
                                    <th>Category</th>
                                    <th style="width: 140px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="productList">
                                @foreach (var product in Model.Products.OrderBy(p => p.DisplayOrder))
                                {
                                    <tr class="product-row" data-id="@product.Id" data-name="@product.Name" data-price="@product.Price" data-stock="@product.Stock" data-category="@product.Category">
                                        <td class="drag-handle text-center">
                                            <i class="fas fa-grip-vertical text-muted"></i>
                                        </td>
                                        <td>
                                            <img src="@(string.IsNullOrEmpty(product.PhotoPath) ? "/Content/Images/placeholder-product.png" : product.PhotoPath)" 
                                                 alt="@product.Name" 
                                                 class="img-thumbnail" 
                                                 style="max-height: 50px; max-width: 50px;">
                                        </td>
                                        <td>@product.Name</td>
                                        <td>$@product.Price.ToString("0.00")</td>
                                        <td>
                                            <span class="@(product.Stock > 0 ? "text-success" : "text-danger")">
                                                @product.Stock
                                            </span>
                                        </td>
                                        <td>@product.Category</td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <a href="@Url.Action("EditProduct", "Dukkan", new { id = Model.Id, productId = product.Id })" class="btn btn-outline-primary">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <button type="button" class="btn btn-outline-primary quick-edit-btn" data-id="@product.Id">
                                                    <i class="fas fa-sliders-h"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-danger delete-product-btn" data-id="@product.Id" data-name="@product.Name">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="mb-3">
                            <i class="fas fa-box-open fa-4x text-muted"></i>
                        </div>
                        <h5>No Products Yet</h5>
                        <p class="text-muted">Start adding products to your shop.</p>
                        <a href="@Url.Action("AddProduct", "Dukkan", new { id = Model.Id })" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Add First Product
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Products From Other Stores -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Products Added From Other Stores</h5>
            </div>
            <div class="card-body p-0">
                @{
                    var shopProducts = ViewBag.ShopProducts as List<Larana.Models.ShopProduct>;
                    
                    // Debug information
                    if (shopProducts == null)
                    {
                        <div class="alert alert-warning m-3">
                            <strong>Debug:</strong> ViewBag.ShopProducts is null
                        </div>
                    }
                    else 
                    {
                        <div class="alert alert-info m-3">
                            <strong>Debug:</strong> Found @shopProducts.Count ShopProducts
                            @if (shopProducts.Count > 0)
                            {
                                <ul>
                                @foreach (var sp in shopProducts)
                                {
                                    <li>
                                        ID: @sp.Id - ProductID: @sp.ProductId - 
                                        Name: @(sp.Product?.Name ?? "NULL PRODUCT") - 
                                        Price: @sp.Price - Stock: @sp.Stock
                                    </li>
                                }
                                </ul>
                            }
                            <a href="@Url.Action("DiagnoseShopProducts", "Dukkan", new { dukkanId = ViewBag.DukkanId })" 
                               class="btn btn-sm btn-secondary">
                                Go to Diagnostic Page
                            </a>
                        </div>
                    }
                }
                
                @if (shopProducts != null && shopProducts.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th>Image</th>
                                    <th>Product Name</th>
                                    <th>Original Store</th>
                                    <th>Your Price</th>
                                    <th>Stock</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var shopProduct in shopProducts)
                                {
                                    <tr>
                                        <td class="align-middle">
                                            @if (shopProduct.Product != null && !string.IsNullOrEmpty(shopProduct.Product.ImageUrl))
                                            {
                                                <img src="@shopProduct.Product.ImageUrl" alt="@shopProduct.Product.Name" class="img-thumbnail" style="width: 50px; height: 50px; object-fit: cover;" />
                                            }
                                            else
                                            {
                                                <img src="~/Content/images/no-image.png" alt="No Image" class="img-thumbnail" style="width: 50px; height: 50px; object-fit: cover;" />
                                            }
                                        </td>
                                        <td class="align-middle">
                                            @if (shopProduct.Product != null)
                                            {
                                                <a href="@Url.Action("Details", "Shop", new { id = shopProduct.ProductId })">
                                                    @shopProduct.Product.Name
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-danger">Unknown Product</span>
                                            }
                                        </td>
                                        <td class="align-middle">
                                            @if (shopProduct.Product?.Dukkan != null)
                                            {
                                                <a href="@Url.Action("Details", "Dukkan", new { id = shopProduct.Product.DukkanId })">
                                                    @shopProduct.Product.Dukkan.Name
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-warning">Unknown</span>
                                            }
                                        </td>
                                        <td class="align-middle">$@shopProduct.Price.ToString("0.00")</td>
                                        <td class="align-middle">@shopProduct.Stock</td>
                                        <td class="align-middle">
                                            <div class="d-flex">
                                                <button type="button" 
                                                        class="btn btn-danger remove-shop-product" 
                                                        data-id="@shopProduct.Id" 
                                                        data-dukkan="@ViewBag.DukkanId"
                                                        data-product="@(shopProduct.Product?.Name ?? "Unknown Product")">
                                                    <i class="fas fa-trash-alt"></i> Remove From Your Store
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info m-3">
                        <p>You haven't added any products from other stores yet.</p>
                        <a href="@Url.Action("AddExistingProducts", "Dukkan", new { id = ViewBag.DukkanId })" class="btn btn-success">
                            <i class="fas fa-plus"></i> Add Products From Other Stores
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Edit Shop Product Modal -->
<div class="modal fade" id="editShopProductModal" tabindex="-1" aria-labelledby="editShopProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="editShopProductModalLabel">Edit Product From Other Store</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editShopProductId">
                <div class="mb-3">
                    <label for="editShopProductName" class="form-label">Product Name</label>
                    <input type="text" class="form-control" id="editShopProductName" readonly>
                </div>
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label for="editShopProductPrice" class="form-label">Your Price ($)</label>
                            <input type="number" class="form-control" id="editShopProductPrice" min="0" step="0.01">
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="mb-3">
                            <label for="editShopProductStock" class="form-label">Your Stock</label>
                            <input type="number" class="form-control" id="editShopProductStock" min="0" step="1">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveShopProductEdit">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Remove Shop Product Confirmation Modal -->
<div class="modal fade" id="removeShopProductModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Remove Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to remove <strong id="removeShopProductName"></strong> from your store?</p>
                <p class="text-danger">This will only remove the product from your store, not delete the original product.</p>
            </div>
            <div class="modal-footer">
                <input type="hidden" id="removeShopProductId">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmRemoveShopProduct">Remove</button>
            </div>
        </div>
    </div>
</div>

<!-- Quick Edit Modal -->
<div class="modal fade" id="quickEditModal" tabindex="-1" aria-labelledby="quickEditModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="quickEditModalLabel">Quick Edit Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="quickEditProductId">
                <div class="mb-3">
                    <label for="quickEditName" class="form-label">Product Name</label>
                    <input type="text" class="form-control" id="quickEditName">
                </div>
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label for="quickEditPrice" class="form-label">Price ($)</label>
                            <input type="number" class="form-control" id="quickEditPrice" min="0" step="0.01">
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="mb-3">
                            <label for="quickEditStock" class="form-label">Stock</label>
                            <input type="number" class="form-control" id="quickEditStock" min="0" step="1">
                        </div>
                    </div>
                </div>
                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="quickEditIsActive">
                    <label class="form-check-label" for="quickEditIsActive">Active (Visible to customers)</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveQuickEdit">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteProductModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Delete Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong id="deleteProductName"></strong>?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <input type="hidden" id="deleteProductId">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteProduct">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script>
        $(document).ready(function() {
            // Show a floating notification about products from other stores 
            createFloatingNotification();
            
            // Function to create floating notification
            function createFloatingNotification() {
                var $notification = $('<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">' +
                    '<div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">' +
                    '<div class="toast-header bg-warning">' +
                    '<strong class="me-auto text-dark"><i class="fas fa-bell"></i> Important Notice</strong>' +
                    '<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>' +
                    '</div>' +
                    '<div class="toast-body">' +
                    'To remove products from other stores, please click here:' +
                    '<div class="mt-2 pt-2 border-top">' +
                    '<a href="@Url.Action("RemoveProducts", "Dukkan", new { id = Model.Id })" class="btn btn-danger btn-sm">Remove Products From Other Stores</a>' +
                    '</div>' +
                    '</div>' +
                    '</div>' +
                    '</div>');
                
                $('body').append($notification);
                
                // Allow the toast to be dismissed
                $notification.find('.btn-close').click(function() {
                    $notification.remove();
                });
            }
            
            // Drag and drop functionality
            var productList = document.getElementById('productList');
            if (productList) {
                var sortable = new Sortable(productList, {
                    handle: '.drag-handle',
                    animation: 150,
                    onStart: function() {
                        $('#dragInstructions').removeClass('d-none');
                        $('#btnSaveOrder').removeClass('d-none');
                    },
                    onEnd: function() {
                        $('#btnSaveOrder').removeClass('d-none');
                    }
                });
            }
            
            // Save product order
            $('#btnSaveOrder').click(function() {
                var productIds = [];
                $('.product-row').each(function() {
                    productIds.push($(this).data('id'));
                });
                
                $.ajax({
                    url: '@Url.Action("ReorderProducts", "Dukkan")',
                    type: 'POST',
                    data: {
                        productIds: productIds,
                        dukkanId: @Model.Id
                    },
                    success: function(response) {
                        if (response.success) {
                            $('#btnSaveOrder').addClass('d-none');
                            $('#dragInstructions').addClass('d-none');
                            showToast('Success', 'Product order saved successfully', 'success');
                        } else {
                            showToast('Error', 'Failed to save product order', 'error');
                        }
                    },
                    error: function() {
                        showToast('Error', 'An error occurred while saving product order', 'error');
                    }
                });
            });
            
            // Search functionality
            $('#productSearch').on('keyup', function() {
                var value = $(this).val().toLowerCase();
                $('#productList tr').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });
            
            // Clear search
            $('#btnClearSearch').click(function() {
                $('#productSearch').val('').trigger('keyup');
            });
            
            // Filter functionality
            $('#productFilter').change(function() {
                var filter = $(this).val();
                
                if (filter === '') {
                    $('.product-row').show();
                } else if (filter === 'in-stock') {
                    $('.product-row').each(function() {
                        $(this).toggle($(this).data('stock') > 0);
                    });
                } else if (filter === 'out-of-stock') {
                    $('.product-row').each(function() {
                        $(this).toggle($(this).data('stock') <= 0);
                    });
                }
            });
            
            // Sort functionality
            $('#productSort').change(function() {
                var sort = $(this).val();
                var rows = $('#productList tr').toArray();
                
                if (sort === 'custom') {
                    location.reload(); // Just reload to get the server-side order
                } else {
                    // Detach the rows for faster DOM manipulation
                    var $tbody = $('#productList');
                    rows = $tbody.children().detach().toArray();
                    
                    rows.sort(function(a, b) {
                        var aVal, bVal;
                        
                        switch(sort) {
                            case 'name-asc':
                                return $(a).data('name').localeCompare($(b).data('name'));
                            case 'name-desc':
                                return $(b).data('name').localeCompare($(a).data('name'));
                            case 'price-asc':
                                return $(a).data('price') - $(b).data('price');
                            case 'price-desc':
                                return $(b).data('price') - $(a).data('price');
                            case 'stock-asc':
                                return $(a).data('stock') - $(b).data('stock');
                            case 'stock-desc':
                                return $(b).data('stock') - $(a).data('stock');
                        }
                    });
                    
                    $tbody.append(rows);
                    $('#btnSaveOrder').removeClass('d-none');
                }
            });
            
            // Quick Edit Product
            $('.quick-edit-btn').click(function() {
                var productId = $(this).data('id');
                var row = $(this).closest('tr');
                
                // Populate the form
                $('#quickEditProductId').val(productId);
                $('#quickEditName').val(row.data('name'));
                $('#quickEditPrice').val(row.data('price'));
                $('#quickEditStock').val(row.data('stock'));
                $('#quickEditIsActive').prop('checked', true); // Assuming active by default
                
                // Show the modal
                var quickEditModal = new bootstrap.Modal(document.getElementById('quickEditModal'));
                quickEditModal.show();
            });
            
            // Save Quick Edit
            $('#saveQuickEdit').click(function() {
                var productId = $('#quickEditProductId').val();
                var name = $('#quickEditName').val();
                var price = $('#quickEditPrice').val();
                var stock = $('#quickEditStock').val();
                var isActive = $('#quickEditIsActive').prop('checked');
                
                $.ajax({
                    url: '@Url.Action("QuickEditProduct", "Dukkan")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        name: name,
                        price: price,
                        stock: stock,
                        isActive: isActive,
                        dukkanId: @Model.Id
                    },
                    success: function(response) {
                        if (response.success) {
                            // Update the row in the table
                            var row = $('tr[data-id="' + productId + '"]');
                            row.data('name', name);
                            row.data('price', price);
                            row.data('stock', stock);
                            row.find('td:eq(2)').text(name);
                            row.find('td:eq(3)').text('$' + parseFloat(price).toFixed(2));
                            row.find('td:eq(4) span').text(stock);
                            row.find('td:eq(4) span').removeClass('text-success text-danger').addClass(stock > 0 ? 'text-success' : 'text-danger');
                            
                            // Close the modal and show success message
                            bootstrap.Modal.getInstance(document.getElementById('quickEditModal')).hide();
                            showToast('Success', 'Product updated successfully', 'success');
                        } else {
                            showToast('Error', 'Failed to update product', 'error');
                        }
                    },
                    error: function() {
                        showToast('Error', 'An error occurred while updating the product', 'error');
                    }
                });
            });
            
            // Delete Product
            $('.delete-product-btn').click(function() {
                var productId = $(this).data('id');
                var productName = $(this).data('name');
                
                $('#deleteProductId').val(productId);
                $('#deleteProductName').text(productName);
                
                var deleteModal = new bootstrap.Modal(document.getElementById('deleteProductModal'));
                deleteModal.show();
            });
            
            // Confirm Delete
            $('#confirmDeleteProduct').click(function() {
                var productId = $('#deleteProductId').val();
                
                $.ajax({
                    url: '@Url.Action("DeleteProduct", "Dukkan")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        dukkanId: @Model.Id
                    },
                    success: function(response) {
                        if (response.success) {
                            // Remove the row from the table
                            $('tr[data-id="' + productId + '"]').remove();
                            
                            // Close the modal and show success message
                            bootstrap.Modal.getInstance(document.getElementById('deleteProductModal')).hide();
                            showToast('Success', 'Product deleted successfully', 'success');
                            
                            // If no products left, reload the page to show empty state
                            if ($('#productList tr').length === 0) {
                                location.reload();
                            }
                        } else {
                            showToast('Error', 'Failed to delete product', 'error');
                        }
                    },
                    error: function() {
                        showToast('Error', 'An error occurred while deleting the product', 'error');
                    }
                });
            });
            
            // Edit Shop Product
            $('.edit-shop-product-btn').click(function() {
                var shopProductId = $(this).data('id');
                var name = $(this).data('name');
                var price = $(this).data('price');
                var stock = $(this).data('stock');
                
                $('#editShopProductId').val(shopProductId);
                $('#editShopProductName').val(name);
                $('#editShopProductPrice').val(price);
                $('#editShopProductStock').val(stock);
                
                var editShopProductModal = new bootstrap.Modal(document.getElementById('editShopProductModal'));
                editShopProductModal.show();
            });
            
            // Save Shop Product Edit
            $('#saveShopProductEdit').click(function() {
                var shopProductId = $('#editShopProductId').val();
                var price = $('#editShopProductPrice').val();
                var stock = $('#editShopProductStock').val();
                
                $.ajax({
                    url: '@Url.Action("EditShopProduct", "Dukkan")',
                    type: 'POST',
                    data: {
                        shopProductId: shopProductId,
                        dukkanId: @Model.Id,
                        price: price,
                        stock: stock
                    },
                    success: function(response) {
                        if (response.success) {
                            // Update the row in the table
                            var row = $('tr.shop-product-row[data-id="' + shopProductId + '"]');
                            row.data('price', price);
                            row.data('stock', stock);
                            row.find('td:eq(3)').text('$' + parseFloat(price).toFixed(2));
                            row.find('td:eq(4) span').text(stock);
                            row.find('td:eq(4) span').removeClass('text-success text-danger').addClass(stock > 0 ? 'text-success' : 'text-danger');
                            
                            // Close the modal and show success message
                            bootstrap.Modal.getInstance(document.getElementById('editShopProductModal')).hide();
                            showToast('Success', 'Product updated successfully', 'success');
                        } else {
                            showToast('Error', 'Failed to update product', 'error');
                        }
                    },
                    error: function() {
                        showToast('Error', 'An error occurred while updating the product', 'error');
                    }
                });
            });
            
            // Remove Shop Product
            $('.remove-shop-product').click(function() {
                var shopProductId = $(this).data('id');
                var dukkanId = $(this).data('dukkan');
                var productName = $(this).data('product');
                
                if (confirm('Are you sure you want to remove ' + productName + ' from your store?')) {
                    console.log('Sending request to remove ShopProduct: ID=' + shopProductId + ', DukkanId=' + dukkanId);
                    
                    $.ajax({
                        url: '@Url.Action("RemoveShopProductAsync", "Dukkan")',
                        type: 'POST',
                        data: {
                            shopProductId: shopProductId,
                            dukkanId: dukkanId
                        },
                        success: function(response) {
                            if (response.success) {
                                alert('Product removed successfully via async endpoint!');
                                location.reload();
                            } else {
                                alert('Error: ' + (response.message || 'Failed to remove product'));
                                console.log('Error details:', response);
                            }
                        },
                        error: function(xhr, status, error) {
                            console.log('Error details:', xhr, status, error);
                            alert('An error occurred while removing the product: ' + status);
                        }
                    });
                }
            });
            
            // Toast notification helper
            function showToast(title, message, type) {
                // You can implement a toast notification here
                alert(title + ': ' + message);
            }
        });
    </script>
} 