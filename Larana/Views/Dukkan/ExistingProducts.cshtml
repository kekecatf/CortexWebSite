@model Larana.Models.ProductListViewModel
@{
    ViewBag.Title = "Add Existing Products";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <h2>Add Existing Products to Your Shop</h2>
            <p>Browse products from other shops and add them to your inventory with your own pricing.</p>
        </div>
        <div class="col-md-4 text-right">
            <a href="@Url.Action("ManageProducts", "Dukkan", new { id = Model.DukkanId })" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Products
            </a>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <form method="get" action="@Url.Action("ExistingProducts", "Dukkan")">
                <input type="hidden" name="dukkanId" value="@Model.DukkanId" />
                <div class="input-group">
                    <input type="text" class="form-control" name="searchTerm" placeholder="Search products..." value="@Model.SearchTerm">
                    <button class="btn btn-primary" type="submit">
                        <i class="fas fa-search"></i> Search
                    </button>
                </div>
            </form>
            <div class="mt-2 text-muted">
                Found @Model.PaginationInfo.TotalItems products available to add to your shop
            </div>
        </div>
    </div>

    <div class="row">
        @if (Model.Products.Count == 0)
        {
            <div class="col-md-12 text-center py-5">
                <h3>No products found</h3>
                <p>There are no existing products to add or your search returned no results.</p>
            </div>
        }
        else
        {
            foreach (var product in Model.Products)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100 product-card">
                        <div class="card-img-top-wrapper">
                            <img src="@(string.IsNullOrEmpty(product.PhotoPath) ? "/img/no-image.jpg" : product.PhotoPath)" 
                                 class="card-img-top" alt="@product.Name">
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text text-muted">@product.Brand</p>
                            <p class="card-text product-description">@product.Description</p>
                            <p class="card-text">
                                <small class="text-muted">Original Price: @product.Price.ToString("C")</small>
                            </p>
                            <p class="card-text">
                                <small class="text-muted">Category: @product.Category</small>
                            </p>
                            <button class="btn btn-primary add-to-shop-btn" 
                                    data-product-id="@product.Id" 
                                    data-product-name="@product.Name"
                                    data-product-price="@product.Price">
                                <i class="fas fa-plus"></i> Add to Shop
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    @if (Model.PaginationInfo.TotalPages > 1)
    {
        <div class="row">
            <div class="col-md-12">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        @if (Model.PaginationInfo.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("ExistingProducts", new { dukkanId = Model.DukkanId, searchTerm = Model.SearchTerm, page = Model.PaginationInfo.CurrentPage - 1 })">
                                    <i class="fas fa-chevron-left"></i> Previous
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <span class="page-link"><i class="fas fa-chevron-left"></i> Previous</span>
                            </li>
                        }

                        @for (int i = Math.Max(1, Model.PaginationInfo.CurrentPage - 2); i <= Math.Min(Model.PaginationInfo.TotalPages, Model.PaginationInfo.CurrentPage + 2); i++)
                        {
                            <li class="page-item @(i == Model.PaginationInfo.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("ExistingProducts", new { dukkanId = Model.DukkanId, searchTerm = Model.SearchTerm, page = i })">
                                    @i
                                </a>
                            </li>
                        }

                        @if (Model.PaginationInfo.CurrentPage < Model.PaginationInfo.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("ExistingProducts", new { dukkanId = Model.DukkanId, searchTerm = Model.SearchTerm, page = Model.PaginationInfo.CurrentPage + 1 })">
                                    Next <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <span class="page-link">Next <i class="fas fa-chevron-right"></i></span>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">Add Product to Your Shop</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addProductForm">
                    <input type="hidden" id="productId" name="productId" />
                    <input type="hidden" id="dukkanId" name="dukkanId" value="@Model.DukkanId" />
                    
                    <div class="mb-3">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="productName" readonly>
                    </div>
                    
                    <div class="mb-3">
                        <label for="price" class="form-label">Your Price</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="price" name="price" step="0.01" min="0.01" required>
                        </div>
                        <small class="form-text text-muted">Set your own price for this product</small>
                    </div>
                    
                    <div class="mb-3">
                        <label for="stock" class="form-label">Stock Quantity</label>
                        <input type="number" class="form-control" id="stock" name="stock" min="0" required>
                    </div>
                    
                    <div class="form-check mb-3">
                        <input type="checkbox" class="form-check-input" id="isClickAndCollect" name="isClickAndCollect">
                        <label class="form-check-label" for="isClickAndCollect">Available for Click & Collect</label>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="saveProductBtn">Add to Shop</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            console.log("ExistingProducts page loaded");
            
            // Debug available products
            console.log("Products found: @Model.Products.Count");

            // Make sure modals are properly initialized in Bootstrap 5
            var addProductModal = new bootstrap.Modal(document.getElementById('addProductModal'));
            
            // Initialize data attributes for product modals
            $('.add-to-shop-btn').click(function () {
                console.log("Add to shop button clicked");
                var productId = $(this).data('product-id');
                var productName = $(this).data('product-name');
                var suggestedPrice = $(this).data('product-price');
                
                console.log("Product: " + productId + " - " + productName + " - $" + suggestedPrice);
                
                $('#productId').val(productId);
                $('#productName').val(productName);
                $('#price').val(suggestedPrice); // Suggest original price as default
                $('#stock').val(10); // Default stock value
                
                // Show the modal
                console.log("Opening modal for " + productName);
                addProductModal.show();
            });
            
            // Handle save product to shop
            $('#addProductForm').submit(function (e) {
                e.preventDefault(); // Prevent the default form submission
                
                var formData = {
                    dukkanId: $('#dukkanId').val(),
                    productId: $('#productId').val(),
                    price: $('#price').val(),
                    stock: $('#stock').val(),
                    isClickAndCollect: $('#isClickAndCollect').is(':checked')
                };
                
                console.log("Submitting form data:", formData);
                
                // Validate form
                if (!this.checkValidity()) {
                    this.reportValidity();
                    return;
                }
                
                // Send AJAX request
                $.ajax({
                    url: '@Url.Action("AddExistingProduct", "Dukkan")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        console.log("AJAX response:", response);
                        if (response.success) {
                            // Show success alert
                            alert(response.message);
                            
                            // Hide modal in Bootstrap 5
                            addProductModal.hide();
                            
                            // Remove product from the list
                            $('[data-product-id="' + formData.productId + '"]').closest('.col-md-4').fadeOut();
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX error:", xhr.responseText);
                        alert('An error occurred while adding the product: ' + error);
                    }
                });
            });
        });
    </script>
} 