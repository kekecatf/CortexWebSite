@model List<Larana.Models.User>
@using System;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    // Oturum kullanıcısını bul
    var currentUsername = User.Identity.Name;
    var currentUser = Model.FirstOrDefault(u => u.Username == currentUsername);
    
    // Tüm JavaScript kodu için güvenli bir varsayılan değer
    int currentUserId = -1;
    
    // Kullanıcı varsa ID'sini al
    if (currentUser != null)
    {
        currentUserId = currentUser.Id;
    }
}

<div class="admin-dashboard">
    <h2 class="page-title">Kullanıcı Yönetimi</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="user-management">
        <div class="actions-container">
            <a href="@Url.Action("Index", "Admin")" class="btn btn-secondary mb-3">
                <i class="fa fa-arrow-left"></i> Kontrol Paneline Dön
            </a>
            <a href="@Url.Action("CreateUser", "Admin")" class="btn btn-success mb-3 float-right">
                <i class="fa fa-plus"></i> Yeni Kullanıcı Oluştur
            </a>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Kullanıcı Adı</th>
                        <th>E-posta</th>
                        <th>Rol</th>
                        <th>Durum</th>
                        <th>Oluşturma Tarihi</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        var isCurrentUser = user.Id == currentUserId;
                        <tr data-id="@user.Id" @(isCurrentUser ? "class=current-user" : "")>
                            <td>@user.Id</td>
                            <td class="edit-username">@user.Username</td>
                            <td class="edit-email">@user.Email</td>
                            <td class="edit-role">@user.UserType</td>
                            <td>
                                <span class="badge @(user.IsActive ? "badge-success" : "badge-danger")">
                                    @(user.IsActive ? "Aktif" : "Pasif")
                                </span>
                            </td>
                            <td>@user.CreatedAt.ToString("yyyy-MM-dd")</td>
                            <td>
                                <button class="btn btn-sm btn-warning edit-user-btn" @(isCurrentUser ? "title='Kendi hesabınız için sınırlı düzenleme'" : "")>
                                    Düzenle
                                </button>
                                <button class="btn btn-sm btn-danger delete-user-btn" id="delete-user-@user.Id" @(isCurrentUser ? "disabled title='Kendi hesabınızı silemezsiniz'" : "")>
                                    Sil
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" role="dialog" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Kullanıcı Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="editErrorMsg" class="alert alert-danger d-none"></div>
                <input type="hidden" id="editUserId" value="0" />
                <div class="form-group">
                    <label for="editUsername">Kullanıcı Adı</label>
                    <input type="text" class="form-control" id="editUsername" required />
                </div>
                <div class="form-group">
                    <label for="editEmail">E-posta</label>
                    <input type="email" class="form-control" id="editEmail" required />
                </div>
                <div class="form-group" id="userTypeFormGroup">
                    <label for="editUserType">Kullanıcı Tipi</label>
                    <select class="form-control" id="editUserType" required>
                        <option value="Customer">Müşteri</option>
                        <option value="Seller">Satıcı</option>
                        <option value="Admin">Yönetici</option>
                    </select>
                </div>
                <div class="form-group" id="isActiveFormGroup">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="editIsActive">
                        <label class="custom-control-label" for="editIsActive">Aktif</label>
                    </div>
                </div>
                <div id="adminEditWarning" class="alert alert-warning d-none">
                    Bir yönetici olarak, sadece kendi kullanıcı adınızı ve e-posta adresinizi güncelleyebilirsiniz. Kendi hesabınız için rol ve durum değişikliklerine izin verilmez.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" id="confirmUpdateBtn" class="btn btn-primary">Değişiklikleri Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete User Modal -->
<div class="modal fade" id="deleteUserModal" tabindex="-1" role="dialog" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteUserModalLabel">Silme İşlemini Onayla</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Bu kullanıcıyı silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.</p>
                <div id="deleteErrorMsg" class="alert alert-danger d-none"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Kullanıcıyı Sil</button>
                <form id="deleteUserDirectForm" action="@Url.Action("DeleteUser", "Admin")" method="post" style="display:none;">
                    <input type="hidden" id="directDeleteUserId" name="id" value="0" />
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .admin-dashboard {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .page-title {
        text-align: center;
        font-size: 2.5rem;
        color: #333;
        margin-bottom: 30px;
    }

    .user-management {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .actions-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    .table th,
    .table td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .table th {
        background-color: #f8f9fa;
        color: #333;
        font-weight: 600;
    }

    .table tr:hover {
        background-color: #f5f5f5;
    }
    
    .table tr.current-user {
        background-color: #f8f8e0;
    }

    .badge {
        padding: 6px 10px;
        border-radius: 30px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-success {
        background-color: #28a745;
        color: white;
    }

    .badge-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-sm {
        padding: 5px 10px;
        font-size: 12px;
    }

    .btn-warning {
        background-color: #ffc107;
        color: #212529;
        border: none;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
    }
    
    .btn-danger[disabled] {
        background-color: #dc3545;
        opacity: 0.65;
        cursor: not-allowed;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
        border: none;
    }

    .modal-header {
        border-bottom: 1px solid #e9ecef;
        padding: 1rem;
    }

    .modal-footer {
        border-top: 1px solid #e9ecef;
        padding: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .custom-control {
        position: relative;
        display: block;
        min-height: 1.5rem;
        padding-left: 1.5rem;
    }

    .custom-control-input {
        position: absolute;
        z-index: -1;
        opacity: 0;
    }

    .custom-control-label {
        position: relative;
        margin-bottom: 0;
        vertical-align: top;
    }

    .custom-control-label::before {
        position: absolute;
        top: 0.25rem;
        left: -1.5rem;
        display: block;
        width: 1rem;
        height: 1rem;
        pointer-events: none;
        content: "";
        background-color: #fff;
        border: #adb5bd solid 1px;
    }

    .alert {
        padding: 12px 20px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
    
    .alert-warning {
        color: #856404;
        background-color: #fff3cd;
        border-color: #ffeeba;
    }
    
    .d-none {
        display: none;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        console.log("ManageUsers sayfası yüklendi. jQuery sürümü:", $.fn.jquery);
        
        // Kullanıcı Id bilgisi
        const currentUserId = @currentUserId;
        console.log("Mevcut kullanıcı ID:", currentUserId);
        
        // Kullanıcı Düzenleme
        const editButtons = document.querySelectorAll('.edit-user-btn');
        const editModal = $('#editUserModal');
        const editUserId = document.getElementById('editUserId');
        const editUsername = document.getElementById('editUsername');
        const editEmail = document.getElementById('editEmail');
        const editUserType = document.getElementById('editUserType');
        const editIsActive = document.getElementById('editIsActive');
        const userTypeFormGroup = document.getElementById('userTypeFormGroup');
        const isActiveFormGroup = document.getElementById('isActiveFormGroup');
        const adminEditWarning = document.getElementById('adminEditWarning');
        const confirmUpdateBtn = document.getElementById('confirmUpdateBtn');
        const editErrorMsg = document.getElementById('editErrorMsg');

        // Form doğrulama fonksiyonları
        window.validateEditForm = function() {
            const idValue = parseInt(editUserId.value);
            if (isNaN(idValue) || idValue <= 0) {
                editErrorMsg.textContent = "Düzenleme işlemi için geçerli bir kullanıcı ID'si gereklidir!";
                editErrorMsg.classList.remove('d-none');
                return false;
            }
            
            if (!editUsername.value || !editEmail.value) {
                editErrorMsg.textContent = "Kullanıcı adı ve e-posta alanları zorunludur!";
                editErrorMsg.classList.remove('d-none');
                return false;
            }
            
            return true;
        };

        editButtons.forEach(button => {
            button.addEventListener('click', function () {
                const row = this.closest('tr');
                const id = parseInt(row.getAttribute('data-id'));
                
                if (isNaN(id) || id <= 0) {
                    alert("Geçersiz kullanıcı ID!");
                    return;
                }
                
                // Hata mesajını gizle
                editErrorMsg.classList.add('d-none');
                editErrorMsg.textContent = '';
                
                const username = row.querySelector('.edit-username').textContent;
                const email = row.querySelector('.edit-email').textContent;
                const role = row.querySelector('.edit-role').textContent;
                const isActive = row.querySelector('.badge').classList.contains('badge-success');

                editUserId.value = id;
                editUsername.value = username;
                editEmail.value = email;
                editUserType.value = role;
                editIsActive.checked = isActive;
                
                // Kendi hesabını düzenlediğini kontrol et (yönetici)
                if (id === currentUserId) {
                    // Yöneticinin kendi hesabı için rol ve durum alanlarını devre dışı bırak
                    userTypeFormGroup.style.display = 'none';
                    isActiveFormGroup.style.display = 'none';
                    adminEditWarning.classList.remove('d-none');
                } else {
                    // Diğer kullanıcılar için tüm alanları etkinleştir
                    userTypeFormGroup.style.display = 'block';
                    isActiveFormGroup.style.display = 'block';
                    adminEditWarning.classList.add('d-none');
                }

                editModal.modal('show');
            });
        });
        
        // Güncelleme işlemini onaylama düğmesi için işleyici
        confirmUpdateBtn.addEventListener('click', function() {
            // Form doğrulama
            if (!validateEditForm()) {
                return;
            }
            
            // Kullanıcı verilerini al
            const id = parseInt(editUserId.value);
            const username = editUsername.value;
            const email = editEmail.value;
            const userType = editUserType.value;
            const isActive = editIsActive.checked;
            
            // AJAX ile kullanıcıyı güncelle
            $.ajax({
                url: '@Url.Action("UpdateUser", "Admin")',
                type: 'POST',
                data: { 
                    id: id,
                    username: username,
                    email: email,
                    userType: userType,
                    isActive: isActive
                },
                success: function(result) {
                    // Modalı kapat
                    editModal.modal('hide');
                    
                    // Sayfayı yenile
                    window.location.href = '@Url.Action("ManageUsers", "Admin")';
                },
                error: function(xhr, status, error) {
                    // Hata durumunda
                    editErrorMsg.textContent = "Güncelleme işlemi başarısız: " + (xhr.responseText || error);
                    editErrorMsg.classList.remove('d-none');
                }
            });
        });

        // Kullanıcı Silme
        const deleteButtons = document.querySelectorAll('.delete-user-btn');
        const deleteModal = $('#deleteUserModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const deleteErrorMsg = document.getElementById('deleteErrorMsg');
        const directDeleteForm = document.getElementById('deleteUserDirectForm');
        const directDeleteUserId = document.getElementById('directDeleteUserId');
        
        let userIdToDelete = 0;

        deleteButtons.forEach(button => {
            button.addEventListener('click', function () {
                // Buton devre dışı bırakılmışsa atla (yöneticinin kendi hesabı için)
                if (this.hasAttribute('disabled')) return;
                
                const row = this.closest('tr');
                userIdToDelete = parseInt(row.getAttribute('data-id'));
                
                // ID'nin geçerli bir tam sayı olduğundan emin ol
                if (!isNaN(userIdToDelete) && userIdToDelete > 0) {
                    // Hata mesajını gizle
                    deleteErrorMsg.classList.add('d-none');
                    deleteErrorMsg.textContent = '';
                    
                    // Gizli form alanına ID'yi koy
                    directDeleteUserId.value = userIdToDelete;
                    
                    // Modalı göster
                    deleteModal.modal('show');
                } else {
                    alert("Geçersiz kullanıcı ID!");
                }
            });
        });
        
        // Silme işlemini onaylama düğmesi için işleyici
        confirmDeleteBtn.addEventListener('click', function() {
            if (isNaN(userIdToDelete) || userIdToDelete <= 0) {
                deleteErrorMsg.textContent = "Geçersiz kullanıcı ID!";
                deleteErrorMsg.classList.remove('d-none');
                return;
            }
            
            console.log("Silme işlemi başlatılıyor. ID: " + userIdToDelete);
            
            // Butonun etkinliğini kaldır
            confirmDeleteBtn.disabled = true;
            confirmDeleteBtn.textContent = "Siliniyor...";
            
            // Form gönder
            directDeleteForm.submit();
        });
    });
</script> 