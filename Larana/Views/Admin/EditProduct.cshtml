@model Larana.Models.Product

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="page-title">Manage Product</h2>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<div class="product-container">
    <div class="form-section">
        <h3>Update Product Details</h3>
        @using (Html.BeginForm("EditProduct", "Admin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            <input type="hidden" name="actionType" value="UpdateDetails" />

            <div class="form-group">
                @Html.LabelFor(model => model.Name, "Product Name")
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>

            <div class="form-group">
                <label for="Brand">Brand (just type a new one to add)</label>
                <input type="text" name="Brand" id="Brand" class="form-control" value="@Model.Brand" required />
            </div>

            <div class="form-group">
                <label for="Category">Category (just type a new one to add)</label>
                <input type="text" name="Category" id="Category" class="form-control" value="@Model.Category" required />
            </div>

            <button type="submit" class="btn btn-primary">Update Details</button>
        }
    </div>

    <div class="form-section">
        <h3>Update Stock & Price</h3>
        @using (Html.BeginForm("EditProduct", "Admin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            <input type="hidden" name="actionType" value="UpdateStockPrice" />

            <div class="form-group">
                @Html.LabelFor(model => model.Stock, "Stock")
                @Html.TextBoxFor(model => model.Stock, new { @class = "form-control", type = "number", min = 0 })
                @Html.ValidationMessageFor(model => model.Stock)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, "Price")
                @Html.TextBoxFor(model => model.Price, new { @class = "form-control", type = "text", value = Model.Price.ToString(System.Globalization.CultureInfo.InvariantCulture) })
                @Html.ValidationMessageFor(model => model.Price)
            </div>

            <div class="form-group">
                <div class="custom-control custom-checkbox">
                    @Html.CheckBoxFor(model => model.IsClickAndCollect, new { @class = "custom-control-input" })
                    @Html.LabelFor(model => model.IsClickAndCollect, "Enable Click & Collect", new { @class = "custom-control-label" })
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Update Product</button>
        }
    </div>

    <div class="form-section">
        <h3>Sales Information</h3>
        <p><strong>Total Sales:</strong> @Model.Sales</p>
    </div>

    <div class="form-section">
        <h3>Delete Product</h3>
        @using (Html.BeginForm("EditProduct", "Admin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            <input type="hidden" name="actionType" value="DeleteProduct" />

            <button type="submit" class="btn btn-danger">Delete Product</button>
        }
    </div>
</div>

<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f4f6f9;
        margin: 0;
        padding: 0;
    }

    .page-title {
        text-align: center;
        font-size: 3rem;
        margin: 50px 0 30px; /* Updated margin for modern look */
        color: #343a40;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 1.5px;
    }

    .product-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .form-section {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .form-section h3 {
        color: #333;
        margin-bottom: 20px;
        font-size: 1.2rem;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        color: #666;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        transition: border-color 0.3s;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0,123,255,0.3);
        outline: none;
    }

    .custom-control {
        position: relative;
        display: block;
        min-height: 1.5rem;
        padding-left: 1.5rem;
    }

    .custom-control-input {
        position: absolute;
        z-index: -1;
        opacity: 0;
    }

    .custom-control-label {
        position: relative;
        margin-bottom: 0;
        vertical-align: top;
    }

    .custom-control-label::before {
        position: absolute;
        top: 0.25rem;
        left: -1.5rem;
        display: block;
        width: 1rem;
        height: 1rem;
        pointer-events: none;
        content: "";
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 0.25rem;
    }

    .custom-control-input:checked ~ .custom-control-label::before {
        color: #fff;
        border-color: #007bff;
        background-color: #007bff;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
    }

    .btn-danger {
        background-color: #dc3545;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    p {
        font-size: 1.1rem;
        color: #343a40;
        line-height: 1.6;
        margin-bottom: 10px;
    }

        p strong {
            color: #007bff;
        }

    .brand-container, .category-container {
        display: flex;
        align-items: center;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 3px;
        cursor: pointer;
        margin-left: 5px;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
        transform: none;
    }

    /* Update button styles to be more obvious */
    #use-brand, #use-category {
        background-color: #28a745;
        color: white;
        font-weight: bold;
        margin-right: 5px;
        min-width: 120px;
    }
    
    #use-brand:hover, #use-category:hover {
        background-color: #218838;
        cursor: pointer;
    }
    
    /* Additional styling for input containers */
    #brand-input-container, #category-input-container {
        margin-top: 5px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 4px;
        border: 1px solid #ddd;
    }

    /* Additional styles for brand/category controls */
    .btn-success {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-success:hover {
        background-color: #218838;
    }
    
    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        display: block;
        margin-top: 5px;
    }
    
    .selected-value {
        display: inline-block;
        background-color: #e9ecef;
        padding: 5px 10px;
        border-radius: 3px;
        margin-top: 5px;
        border: 1px solid #ced4da;
    }

    /* New styles for brand/category */
    .alert-info {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
        padding: 10px 15px;
        margin-bottom: 15px;
        border-radius: 4px;
    }
    
    .btn-success {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-success:hover {
        background-color: #218838;
    }
    
    .mt-2 {
        margin-top: 10px;
    }
    
    .card {
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .p-3 {
        padding: 15px;
    }
    
    .bg-light {
        background-color: #f8f9fa;
    }

    /* New styles */
    small {
        font-weight: normal;
        color: #6c757d;
        font-size: 80%;
    }
</style>

<script>
    // Simple direct functions for brand and category handling
    function handleBrandChange() {
        var dropdown = document.getElementById('brandDropdown');
        var hiddenInput = document.getElementById('brandHiddenInput');
        
        if (dropdown.value === 'ADD_NEW') {
            document.getElementById('newBrandContainer').style.display = 'block';
            document.getElementById('newBrandInput').focus();
        } else if (dropdown.value) {
            hiddenInput.value = dropdown.value;
            document.getElementById('brandValidation').textContent = 'Selected: ' + dropdown.value;
            document.getElementById('brandValidation').className = 'selected-value';
        }
    }
    
    function saveNewBrand() {
        var newBrandInput = document.getElementById('newBrandInput');
        var brandValue = newBrandInput.value.trim();
        var hiddenInput = document.getElementById('brandHiddenInput');
        var dropdown = document.getElementById('brandDropdown');
        
        if (!brandValue) {
            alert('Please enter a brand name');
            return;
        }
        
        // Add to dropdown if not exists
        var exists = false;
        for (var i = 0; i < dropdown.options.length; i++) {
            if (dropdown.options[i].value === brandValue) {
                exists = true;
                dropdown.selectedIndex = i;
                break;
            }
        }
        
        if (!exists) {
            var option = document.createElement('option');
            option.text = brandValue;
            option.value = brandValue;
            // Insert before the "Add New" option
            dropdown.add(option, dropdown.options.length - 1);
            dropdown.value = brandValue;
        }
        
        // Set the hidden input
        hiddenInput.value = brandValue;
        
        // Update validation message
        document.getElementById('brandValidation').textContent = 'Selected: ' + brandValue;
        document.getElementById('brandValidation').className = 'selected-value';
        
        // Hide the new brand container
        document.getElementById('newBrandContainer').style.display = 'none';
        
        alert('Brand "' + brandValue + '" has been added!');
    }
    
    function cancelNewBrand() {
        document.getElementById('newBrandContainer').style.display = 'none';
        document.getElementById('brandDropdown').selectedIndex = 0;
    }
    
    function handleCategoryChange() {
        var dropdown = document.getElementById('categoryDropdown');
        var hiddenInput = document.getElementById('categoryHiddenInput');
        
        if (dropdown.value === 'ADD_NEW') {
            document.getElementById('newCategoryContainer').style.display = 'block';
            document.getElementById('newCategoryInput').focus();
        } else if (dropdown.value) {
            hiddenInput.value = dropdown.value;
            document.getElementById('categoryValidation').textContent = 'Selected: ' + dropdown.value;
            document.getElementById('categoryValidation').className = 'selected-value';
        }
    }
    
    function saveNewCategory() {
        var newCategoryInput = document.getElementById('newCategoryInput');
        var categoryValue = newCategoryInput.value.trim();
        var hiddenInput = document.getElementById('categoryHiddenInput');
        var dropdown = document.getElementById('categoryDropdown');
        
        if (!categoryValue) {
            alert('Please enter a category name');
            return;
        }
        
        // Add to dropdown if not exists
        var exists = false;
        for (var i = 0; i < dropdown.options.length; i++) {
            if (dropdown.options[i].value === categoryValue) {
                exists = true;
                dropdown.selectedIndex = i;
                break;
            }
        }
        
        if (!exists) {
            var option = document.createElement('option');
            option.text = categoryValue;
            option.value = categoryValue;
            // Insert before the "Add New" option
            dropdown.add(option, dropdown.options.length - 1);
            dropdown.value = categoryValue;
        }
        
        // Set the hidden input
        hiddenInput.value = categoryValue;
        
        // Update validation message
        document.getElementById('categoryValidation').textContent = 'Selected: ' + categoryValue;
        document.getElementById('categoryValidation').className = 'selected-value';
        
        // Hide the new category container
        document.getElementById('newCategoryContainer').style.display = 'none';
        
        alert('Category "' + categoryValue + '" has been added!');
    }
    
    function cancelNewCategory() {
        document.getElementById('newCategoryContainer').style.display = 'none';
        document.getElementById('categoryDropdown').selectedIndex = 0;
    }
    
    // Initialize on page load
    document.addEventListener("DOMContentLoaded", function() {
        // Set initial values if they exist
        var brandDropdown = document.getElementById('brandDropdown');
        var categoryDropdown = document.getElementById('categoryDropdown');
        var brandHiddenInput = document.getElementById('brandHiddenInput');
        var categoryHiddenInput = document.getElementById('categoryHiddenInput');
        
        if (brandDropdown.value) {
            brandHiddenInput.value = brandDropdown.value;
            document.getElementById('brandValidation').textContent = 'Selected: ' + brandDropdown.value;
            document.getElementById('brandValidation').className = 'selected-value';
        }
        
        if (categoryDropdown.value) {
            categoryHiddenInput.value = categoryDropdown.value;
            document.getElementById('categoryValidation').textContent = 'Selected: ' + categoryDropdown.value;
            document.getElementById('categoryValidation').className = 'selected-value';
        }
    });
</script>
